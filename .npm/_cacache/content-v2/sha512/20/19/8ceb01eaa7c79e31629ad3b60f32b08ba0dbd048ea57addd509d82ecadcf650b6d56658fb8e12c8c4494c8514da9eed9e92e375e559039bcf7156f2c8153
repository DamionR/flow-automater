{"_id":"@vanilla-extract/private","_rev":"28-b93d65263e111efc182b506165beadef","name":"@vanilla-extract/private","dist-tags":{"latest":"1.0.5","get-crackling":"0.0.0-get-crackling-202281955846","dts-bundle":"0.0.0-dts-bundle-20228303510","babel-modern":"0.0.0-babel-modern-20231227140935","vite-plugin-new":"0.0.0-vite-plugin-new-20240116010153","namespace-theme-tokens":"0.0.0-namespace-theme-tokens-20240321225912","package-json-types-field":"0.0.0-package-json-types-field-20240521234503"},"versions":{"0.1.0":{"name":"@vanilla-extract/private","version":"0.1.0","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.1.0","_nodeVersion":"14.16.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-it5HWDWsjHBWZhEcBwl8Fvcp5qG1NiUK8uKsPV9j/+F6NZ/2ZcgIqwOEjZqmsj0NtJOa+sJZwkZT/5yYDU02rA==","shasum":"f725cd43977ff8adb80c9bec3ce1e7bcd24d2401","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.1.0.tgz","fileCount":12,"unpackedSize":20007,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgc/hzCRA9TVsSAnZWagAArQgP/jSznlAvhl3OO/P3G4jZ\nGbQb0yHIRrp2V7Sle4vvY5bYCp58WMsalrwKQfUtyYY9zqC/+BRKPV/sIupe\n7UBScZYr7woZ+3JlaNys83C518BAVbLdvfWiiHUur9Tnkw1BcOBP+/gIfVy+\nDvrJaJwI4YmntV4Gw6DiGQNMGi+95JVLPqNbl9pZantF8w6e+k+elZ8qajp5\nzHcIPtdspUcTcjI1afew+3jIsR+HyVVlXdfhdfbYnzt4+K7NvQdcMBQ8o+k7\nExwzugQEUlnK5aT5ROyCMjaq3T98brFZ+iEUffM/oahgAnzY5BMzAolFQYaQ\nbRlkFsCKBxcep6kBWsH98SemmHq9fnqkuw9u2C8vlT53xWadPwS8j+9DM7B/\nG+iucuPZLPfgZcw1gWc/xsbTVVeFh/AyaePOGMCxfWS/LCWMlm3NJa/msTfx\n47mOLmQu9cljMTE1AgtqidUoIHwE+CkwjLle8u/07k57Wfv51A++iZbhpMPT\nEKJ/oPlAWNy+AynCpD6N1xoIMfzui2/LM4/6Ep7XWXbg54mymZKGdkzug9dV\njWx8f57087RCTIDzBNfTvNT55K/F6ebFuocoP8Vvgmgke/6HfYkgoTofOZ7N\nfZv+ud5eUhHSWegUjyJuvp6rbvjgFikSMCaZOfIkg/Oo9Hx6TES0wykGlZ2m\nzICa\r\n=2Zho\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDznicG18+JWOSK2hoLxT0cHzp3UY5YmMaT22Q356/tcAIhAL9r6kW9FFOaNY3CvgJIhVeV0XGG1lLCaZNobDntFk1Q"}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"jahredhope","email":"jahredhope@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mattsjones","email":"mattjones701@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.1.0_1618212979132_0.8633301366125574"},"_hasShrinkwrap":false},"0.1.1":{"name":"@vanilla-extract/private","version":"0.1.1","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.1.1","_nodeVersion":"14.16.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-80sIzAcjya/b+qradMsIcCGwAxLLqsLDMk8Hj1trJtKZOkz+JMHNi5kHwjy+7nZP84uUzrmUXkvG4gBfqc8LNg==","shasum":"3948d28141668773dc65c9b08615ac18f475fd03","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.1.1.tgz","fileCount":13,"unpackedSize":21230,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJghgVpCRA9TVsSAnZWagAA1rQP/0sN7GI7lstvPO1ecoLn\njmi6DRo2riZEVHKZw3q5JfGFi/WzZvLkUZJIQJvrCZ0Pk8PfH7WUC0D/br9/\nlI4XlWFmIwiXphlh3bO87XKw/ZKzFHpHa/PAUWBYQXmqX9psxKrmvPAUFgzK\nhy6ZjyA/Fcdz1knzwIzW8zE4Qih1SUdqyK6Tjub/lWWfHSmnlWD3zTLH2QkZ\nW9NSXjuXLAlSK00NvGAELddgWGasB+lOlj2kuMPm8sBU9onGili+z8KEG3VZ\n03d8kgiuCIsgHd7Kv1Tn/PGkcpgmTNoAyCpchQvblYymKO3KFAbfEBp9/XpC\n+44ubtGsc0sSxZY2JvRo2u8G0JWmbqjw5H+BFY1MAjlANdteH0C3GUAt37Dm\nUYC17Nb7qYUdtagFLREMCrzS/Fl5MuZzUA5iX0vRpO6n8wNz//mmPsB6E/Hr\n7DOJeMKqSneSc3gBV+ca9N5xenBDJREXxN9rITs7wWVX9J6y+xie2YgJVVe0\nxsYCOs+no/gmNl1wN0Rxo7QEl5ZVGzB495KXNAxQENlGiV3DsPYMkemBiDhT\n5t/i9YUF3CWSYoOlkeKef5LGPOD7ZMD2fmDi3uMZyfXIQzPYzSKLtd/UBZx0\n4tY2nAuc4rstpIRupsBPuIg+nR+JihO0D117Q552yJfU5ggDg4W6klZsP/uD\n8FGM\r\n=htTZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD83qO2qAsSFMtE7lCLjl+E5wFeCcdPnU1XMMrd9Y3qeAIga1nXG4u4MnvHJscZ6Vo6KgCFh64HyCemzYV/70z73io="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"jahredhope","email":"jahredhope@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mattsjones","email":"mattjones701@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.1.1_1619395943835_0.6717975813365351"},"_hasShrinkwrap":false},"0.1.2":{"name":"@vanilla-extract/private","version":"0.1.2","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.1.2","_nodeVersion":"14.16.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-LuaCxlU4BlsSlK53QQABxo53TqWFiQyjXwDCz+5tpaChhMHrmJ5/XVFQVH3zD03HATfAJcmv8WqAQOZnF0FmGg==","shasum":"79cb16243764c5f51b99e0a7ed137e6c5e06223e","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.1.2.tgz","fileCount":13,"unpackedSize":23387,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgkiZDCRA9TVsSAnZWagAAj68P/AsO90KGE5TgLwaKgiOT\n8vXQH7pTHTJfzQnzwqVH/6/cL0kSd9sw7s5xanSsI/5QGTmQQthHpO8hhciX\nK1gQ2Y+bS8PfJ6HP8IBFxnVN0IbqBwyh0/akjvRrcnJbCpvFe5V8DBCWF8xZ\nMOgtL8XAuiIJaDjea1mT/i1y47NX60WluF21246upyJ/fdn8l0YkJk3tXzN4\nspAktUPJoZik7ilfIM5miHaqI4eVydpgWndI8Ty+VUBrnKkcA0bZF2goom/F\nP3YgrHSNjDoBQ3QUygJh+3BrmjEKmuIpH2h9rkemh+UVOWTwadQ8jdEFF2gS\n3shX3bkmIR6rc897SQEtrW4sK7qUuy5CPj/RUvqG+skCNIXhCx0itN5i8HMs\np1fnrgwGKsU7TnG5VEhZex8Udq79pwstglfUCYgCwoXc0cDWfMPWvYYIUezN\nfOaG+Lfc7cbpj+A/4sNhoux9GRf3CH5TdSYhwkX80cKTDAF1PL/T7T/Xh6uV\nrn0BF8VQghA9kDimeKqeRLywcEC+ENxZsfwOER7UvMaa8VYph+HSORczTaKl\n2ru5d/hIR5IQL08B6RQ/7VUd2IUUHrgPjYZHoOeirNuGuNan3e6YvfPV8MlX\nsA3j7qJI9O6I0gsHgMk90TLxUwGXsYZjNZG1q5b5xogD/z2lgm72xYqMK8jc\nWafn\r\n=y8B1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHDZWZL8ENBzXNTA8CK7d8hO0WFJVvI9xjR3XIP/n7F/AiEAmEYG7mFsOCQSkj3+IeOBCSAat6vq8ZvmjjsLg4Zzzck="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"jahredhope","email":"jahredhope@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mattsjones","email":"mattjones701@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.1.2_1620190786945_0.6324740639872262"},"_hasShrinkwrap":false},"1.0.0":{"name":"@vanilla-extract/private","version":"1.0.0","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.0","_nodeVersion":"14.17.0","_npmVersion":"6.14.13","dist":{"integrity":"sha512-NS/Dqenj1Fd9fX1qWz4nFP6hefbTJIpQYLgKQsJBQonJ/E0QYiYtTJ1oeUh7vpoW0ojVuuRdA1URbKb7MCJ4JA==","shasum":"10711c4481decd2f9a2f19cb85dcee60eff3f75c","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.0.tgz","fileCount":13,"unpackedSize":24265,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgsITqCRA9TVsSAnZWagAAAvQP/2gRKrGuirrjXn81mz8e\nZvkTlWg6l3whCy5VXB4fA82UTmqjzk3KSyiUUKXmh6pmecTYSF+dQ4aju/ti\nvT24LMM0g/Fq8jFhe5F67dNygLgdmm8uy2IS4RoBuoRN9pW83h0wzcecCeC5\nri5tfiMZ9bJSUAP2hK3bCtgIpwGGaPcTytOAWN4ZuIo7aBcxFg9CY1VnunTy\nY4gkMyfkbhWg3jbFSJpSp+UOzYJBhteGy5JgAs1tOUieaZ3s2aenP7t5sfd1\npvN9auzyv8/0S2TckDYyTyItLI7+9ehoythNu7dC3KWhhT9ydtLKZQYC6Nfc\nfkAQD95sOiBgdiTfaSedM1V9eR5R30wNBHeccpr8lHXy5dvNG94C/iHF4riz\nItKoOY3G3G7mFBoQOpqFxiaOupTAF17K5qoglpVuWakTzVEh+i6oO4bL6773\nJVH3UdMEt6m+0lcb+Yn/YcLc7r/kbVc6FvW/ekGa/weOxFDBWjfgOJSU5Pcy\nJwQT+t9AC/ucRKZSQojoJt1SJMab9ZejvB3EaOxT36jYcHW5vlrw8k8SotvD\nWxHM2dsQfmtuBM1J2WKsAT8tgGyfkDd3R538RS4pCF/llyUEBRfqC7qO8Z8f\nOW8IsvbcrJSJiLQvmFk7SnyDacu8cT6opFaZrpel38/2+VezXSBwDJsn1XPy\nyAkj\r\n=TDYN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEWRLbQ7p2UlZDrDI34DT7WvxhiN9/mGc+yFiUGf4+swAiBpAsXSxkjtz591WKMjNHWbiW8e8XbwqRJGeDTr519pCw=="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"jahredhope","email":"jahredhope@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mattsjones","email":"mattjones701@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.0_1622181097655_0.2649783580580922"},"_hasShrinkwrap":false},"1.0.1":{"name":"@vanilla-extract/private","version":"1.0.1","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.1","_nodeVersion":"14.17.3","_npmVersion":"6.14.13","dist":{"integrity":"sha512-ABrFJGSmF7a1M+eDTsIeAErPhIeRyBY3ypyLQPc4bUVEK1mvF7F2gx4fTP81pm12bkS0GhjSJtM854lcPWhB+w==","shasum":"c9479cebea7e7fbb07a1fe5b5c988a8753ef04ed","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.1.tgz","fileCount":13,"unpackedSize":26397,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg8R00CRA9TVsSAnZWagAAfyYQAJPgB7SHkTif8vUP/LBX\nztULZUU4nWcyyIjKW3NJP8o+NNU4xQzGFM5xXyri4RzvmPVq2sMGv+bAXRHY\nE62wt1vN29JRiXczSX6ltDOYufro3/X8QEqZjzW55V5sqMjeNW+EvJVtKT62\nZ7uB9bURNMun4738U3mogp4kC2LrTP7Mcq9alz6PqI4xoT4W2WTOG3/sRCHN\nUWvBspY1ccSIzQLGw1C+CeETOhUk9UxQ/d+rfRT9nSHnFIW5w7zzmUii2GEZ\nvOWGSj0WSnTMraYG2sasbRk40kngAuEwcSbTFBDqBUpLkwO41zhXhOO5qw4G\nOh/CeWkOQ703LqAUQN7Qz/tH68sMVW8efc3G7Is3RCu3DpU23v5jiLy1xg+9\nKvGqKYvT9Kw7M4Q8byiow6CFADnaurDYuSdZBfc8lFMTFzyH0YgYMBwiFETv\nqgynSACL5p3FKE3oiHD4u1H9FnDxsdo5Jb9l2ZI2z/bsHqdmd1/PawP2i53X\ndDgKI1Hjno/oDSwA1LkYVA0kJONV7bi72h4m3gCrDd+3qXZC3mR/6JtPyeNa\nHZH1CjaCwpflJzRu2zUGIqbQnbY5FFvizjQ0YuTHRw6S9m6q8jQ4EQv86cYn\nK55/BCw7e6Ob1UnSXpSufn+5FCUuZHBIoNMRWvHkGM+FVb5sdaX2TypkW56/\naINC\r\n=g1zT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGopiFda+XvyM5ZV6QTY7zMiw3wGFCzbCn+87AuLISkiAiEA6oecaqAOtkSdjRM3pl7Ht4E6EFWiS4KXBkRHd83Km3A="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"jahredhope","email":"jahredhope@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mattsjones","email":"mattjones701@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.1_1626414388794_0.7392585915396199"},"_hasShrinkwrap":false},"1.0.2":{"name":"@vanilla-extract/private","version":"1.0.2","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","_resolved":"","_integrity":"","_from":"file:vanilla-extract-private-1.0.2.tgz","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.2","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-JCJsvqcFiLsRgtLw1WQmEa6xVUoknAjFBlf3ubS/Pdm7SGe9m8xGB/8ZRErYAN+2OJX+f3ROGnDN6kGLhmQv7w==","shasum":"524069e0cd68df11bbcb41a4ea176b9b55de76c2","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.2.tgz","fileCount":13,"unpackedSize":35002,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnr2LCRA9TVsSAnZWagAAbQkP/ixboUVgWDpZtK5/AS1p\nTeDA/dMmavDbjfS+B72c8BFL3FgD+lBG1qBo1QpmeWmd3JXmYJVEvvaZ+zJP\n7+aKVuDwuVWr97Epl3KbZt2XedEePt7Dkz/QlidaE2lhk5ztP1OnUPxgzyTp\nAKYhU6an4w0VGBMDqbIq83eZBsxvBtyDFN3CYqK9ht/UcPvM1dt2l6C2xvtG\n5/z1MLeG2LyYsiR2wssVGqOjkhKNqn+xTBYt29PxxQ2wgvrUCuZJnY9TGK1b\n3CQlXVNZ0PLDJ1/9S5Yi9fXUkbCCqKAdR2h6Y+mPgzDl8EEkBMqulIllxxTY\nf4XIaHkRYFf61XtDU0nttOiGn8B4owVyyAP1nC0Uh84hW8Jceng0Ne8004K8\n2tThuvDJHMjd4ix4KJFkDXjs4R3V3Vdi+mdCP1IWRF1dedul01PS3U7Ymitz\naEyIFJFwiIjSkf+fyTromN7zR8I85EmMkkL6WXDESjYa4B5SPQJY9/wYEboo\nUiSXEOV1Y8FmEATWyqUHMU79xjmHPQebJgkArG4EsSPVopx1Z5DNP9p2MbYS\n+l4KzwgNDK97PYf5KtdDTq2EFf+HmnsEf3kp81Cf2GDkZwQP8NeOU7abpE6p\nipol49i0D+KPGq4DYeDMloCGcvDd/RDcTubxYabQNTceg6GPYN79zWug2wls\n85KX\r\n=hGpA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCOPgwvt6CAWN/09KHCjs2nX6/nV0ZKNbYISmC8J6mn+gIgDQ863BkUU4pLs0IubiKrsdKm6j+20UgNtWEfB6zZ/uM="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.2_1637793163758_0.6222902631004397"},"_hasShrinkwrap":false},"1.0.3":{"name":"@vanilla-extract/private","version":"1.0.3","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","_resolved":"","_integrity":"","_from":"file:vanilla-extract-private-1.0.3.tgz","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.3","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","dist":{"integrity":"sha512-17kVyLq3ePTKOkveHxXuIJZtGYs+cSoev7BlP+Lf4916qfDhk/HBjvlYDe8egrea7LNPHKwSZJK/bzZC+Q6AwQ==","shasum":"7ec72bc2ff6fe51f9d650f962e8d1989b073690f","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.3.tgz","fileCount":13,"unpackedSize":34721,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqBRDCRA9TVsSAnZWagAA2ZwP/0rjz2lBWsxkI+aA/N8U\n4Fu/JJEckm2a8bsph2dlXtZq/1h1stmHkF0mbrqZUykYulQrM4tY68laOFSY\nk39lkmjVAoXz0PDBHU8J3mqjDnZs/HpNSqZFyqO6NBXhz0jL7L+lLPykQ1dC\nhoRl6DlXYj7f5kU9dHHyPklGL02O9QcjZrHCoE7hNK7xXluPes//uQyKJi4k\n4EczU92HXRf4yzmZNoAWEAppJFTN63XsgyNtd3g/VQW+lM969y0t4Z0ufLpJ\nalyLADngauPh27SBGvuY8k8opIiTkkNBBZEpwdVnU/tG4Uq5s8QcrXwbJtZo\nnpxuPLadDFBsdEnBJeefVidnLi5pwLQARFDh7CLGF04E41az1qiR7UTXgZYs\nVEEOJU1U9r+sI6gK8wSNAra9+z4vF1sWO5jFXavywTMx3Xe6bwq5lESdxcEi\nfhvtxTEroaH3SFoaab32Ff4P4qkk7naLL2dSPWrcwrr1YA0c3newy3tTh9zW\nAUH37gLN89SH9ZK1P9RICbKMzVDWmex38+frQGDlYB0B8ge6KCjjCS9Kftyo\nYU8tUL0hlMa2ktuoXF5nxE0P7Vekke0rRjAsSm1d7WyPdQC9yHst4D6GY/eD\nMI4Q+FNEbmGvelJ22MEQKDkrMjoSCvsVXJhG4y/F9tAT/O2jzuwg6T3U0ss/\ngIe7\r\n=ws8U\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAtAQmrxWpLSWm0YeWJc6pDN4zbZvclrrNDHBob7NaZuAiB8mlMNyM4/RE+Vmw3jrew7qixI9pTVCuLSUs4lT5PoEw=="}]},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.3_1638405187072_0.16430163747715598"},"_hasShrinkwrap":false},"0.0.0-get-crackling-202281912152":{"name":"@vanilla-extract/private","version":"0.0.0-get-crackling-202281912152","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/index.cjs","module":"dist/index.mjs","repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","devDependencies":{"@crackle/cli":"^0.8.0"},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.mjs"},"require":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.cjs"}}},"scripts":{"build":"crackle package"},"readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/seek-oss/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](#setup) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n- [Setup](#setup)\n  - [webpack](#webpack)\n  - [esbuild](#esbuild)\n  - [Vite](#vite)\n  - [Next.js](#nextjs)\n  - [Gatsby](#gatsby)\n  - [Rollup](#rollup)\n  - [Test environments](#test-environments)\n  - [Configuration](#configuration)\n    - [identifiers](#identifiers)\n    - [esbuildOptions](#esbuildoptions)\n- [Styling API](#styling-api)\n  - [style](#style)\n  - [styleVariants](#stylevariants)\n  - [globalStyle](#globalstyle)\n  - [createTheme](#createtheme)\n  - [createGlobalTheme](#createglobaltheme)\n  - [createThemeContract](#createthemecontract)\n  - [createGlobalThemeContract](#createglobalthemecontract)\n  - [assignVars](#assignvars)\n  - [createVar](#createvar)\n  - [fallbackVar](#fallbackvar)\n  - [fontFace](#fontface)\n  - [globalFontFace](#globalfontface)\n  - [keyframes](#keyframes)\n  - [globalKeyframes](#globalkeyframes)\n- [Recipes API](#recipes-api)\n  - [recipe](#recipe)\n- [Dynamic API](#dynamic-api)\n  - [assignInlineVars](#assigninlinevars)\n  - [setElementVars](#setelementvars)\n- [Utility functions](#utility-functions)\n  - [calc](#calc)\n- [Thanks](#thanks)\n- [License](#license)\n\n---\n\n## Setup\n\nThere are currently a few integrations to choose from.\n\n### webpack\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/webpack-plugin\n```\n\n2. Add the [webpack](https://webpack.js.org) plugin.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n\nmodule.exports = {\n  plugins: [new VanillaExtractPlugin()],\n};\n```\n\n<details>\n  <summary>You'll need to ensure you're handling CSS files in your webpack config.</summary>\n\n  <br/>\n  For example:\n  \n  ```js\n  const { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n  const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n  module.exports = {\n    plugins: [\n      new VanillaExtractPlugin(),\n      new MiniCssExtractPlugin()\n    ],\n    module: {\n      rules: [\n        {\n          test: /\\.vanilla\\.css$/i, // Targets only CSS files generated by vanilla-extract\n          use: [\n            MiniCssExtractPlugin.loader,\n            {\n              loader: require.resolve('css-loader'),\n              options: {\n                url: false // Required as image imports should be handled via JS/TS import statements\n              }\n            }\n          ]\n        }\n      ]\n    }\n  };\n  ```\n</details>\n\n3. If you'd like automatic debuggable identifiers, you can add the [Babel](https://babeljs.io) plugin.\n   \n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### esbuild\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/esbuild-plugin\n```\n\n2. Add the [esbuild](https://esbuild.github.io/) plugin to your build script.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { vanillaExtractPlugin } = require('@vanilla-extract/esbuild-plugin');\n\nrequire('esbuild').build({\n  entryPoints: ['app.ts'],\n  bundle: true,\n  plugins: [vanillaExtractPlugin()],\n  outfile: 'out.js',\n}).catch(() => process.exit(1))\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n3. Process CSS\n\nAs [esbuild](https://esbuild.github.io/) currently doesn't have a way to process the CSS generated by vanilla-extract, you can optionally use the `processCss` option.\n\nFor example, to run autoprefixer over the generated CSS.\n\n```js\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\nconst postcss = require('postcss');\nconst autoprefixer = require('autoprefixer');\n\nasync function processCss(css) {\n  const result = await postcss([autoprefixer]).process(\n    css,\n    {\n      from: undefined /* suppress source map warning */\n    }\n  );\n\n  return result.css;\n}\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.ts'],\n    bundle: true,\n    plugins: [\n      vanillaExtractPlugin({\n        processCss\n      })\n    ],\n    outfile: 'out.js'\n  })\n  .catch(() => process.exit(1));\n```\n\n### Vite\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/vite-plugin\n```\n\n2. Add the [Vite](https://vitejs.dev/) plugin to your Vite config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\n// vite.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n### Next.js\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/babel-plugin @vanilla-extract/next-plugin\n```\n\n2. If you don't have a `next.config.js` file in the root of your project, create one. Add the [Next.js](https://nextjs.org) plugin to your `next.config.js` file.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(nextConfig);\n```\n\nIf required, this plugin can be composed with other plugins.\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\nconst withMDX = require('@next/mdx')({\n  extension: /\\.mdx$/\n});\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(withMDX(nextConfig));\n```\n\n3. (Optional) If you want to automatically generate debug IDs during development, you can add the [Babel](https://babeljs.io) plugin. Note that this step will cause Next.js to switch from [SWC](https://github.com/swc-project/swc) to Babel, increasing build times. This may or may not be an issue depending on the size of your project.\n\n> Note: While optional for Next.js, the Babel plugin is still required when trying to run `.css.ts` files in Node for unit testing since the files are no longer being processed by a bundler.\n\nIf you don't have a `.babelrc` file in the root of your project, create one. Add the Babel plugin to your `.babelrc` file, ensuring that you're also including `\"next/babel\"` in your `presets` array.\n\n```json\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### Gatsby\n\nTo add to your [Gatsby](https://www.gatsbyjs.com) site, use the [gatsby-plugin-vanilla-extract](https://github.com/gatsby-uc/plugins/tree/main/packages/gatsby-plugin-vanilla-extract) plugin.\n\n### Rollup\n\n> Note: This option is useful for library development but not suitable for application bundles.\n> Rollup has no built-in CSS bundling, so this plugin just outputs styles as individual CSS assets.\n> For applications we instead recommend to use Vite\n> (which itself uses Rollup under the hood but comes with its own CSS bundling).\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/rollup-plugin\n```\n\n2. Add the [Rollup](https://rollupjs.org/) plugin to your Rollup config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\n// rollup.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n### Test environments\n\n1. Install the dependencies.\n\n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n2. Add the [Babel](https://babeljs.io) plugin.\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n3. Disable runtime styles (Optional)\n\nIn testing environments (like `jsdom`) vanilla-extract will create and insert styles. While this is often desirable, it can be a major slowdown in your tests. If your tests don’t require styles to be available, the `disableRuntimeStyles` import will disable all style creation.\n\n```ts\n// setupTests.ts\nimport '@vanilla-extract/css/disableRuntimeStyles';\n```\n\n### Configuration\n\n#### identifiers\n\nDifferent formatting of identifiers (e.g. class names, keyframes, CSS Vars, etc) can be configured by selecting from the following options:\n\n- `short` identifiers are a 7+ character hash. e.g. `hnw5tz3`\n- `debug` identifiers contain human readable prefixes representing the owning filename and a potential rule level debug name. e.g. `myfile_mystyle_hnw5tz3`\n\nEach integration will set a default value based on the configuration options passed to the bundler.\n\n### esbuildOptions\n> Only for `esbuild`, `vite` and `rollup` plugins\n\nesbuild is used internally to compile `.css.ts` files before evaluating them to extract styles. You can pass additional options here to customize that process.\nAccepts a subset of esbuild build options (`plugins`, `external`, `define` and `loader`), see https://esbuild.github.io/api/#build-api.\n\n---\n\n## Styling API\n\n> 🍬 If you're a [treat](https://seek-oss.github.io/treat) user, check out our [migration guide.](./docs/treat-migration-guide.md)\n\n### style\n\nCreates styles attached to a locally scoped class name.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const className = style({\n  display: 'flex'\n});\n```\n\nCSS Variables, simple pseudos, selectors and media/feature queries are all supported.\n\n```ts\nimport { style } from '@vanilla-extract/css';\nimport { vars } from './vars.css.ts';\n\nexport const className = style({\n  display: 'flex',\n  vars: {\n    [vars.localVar]: 'green',\n    '--global-variable': 'purple'\n  },\n  ':hover': {\n    color: 'red'\n  },\n  selectors: {\n    '&:nth-child(2n)': {\n      background: '#fafafa'\n    }\n  },\n  '@media': {\n    'screen and (min-width: 768px)': {\n      padding: 10\n    }\n  },\n  '@supports': {\n    '(display: grid)': {\n      display: 'grid'\n    }\n  }\n});\n```\n\nSelectors can also contain references to other scoped class names.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nexport const childClass = style({\n  selectors: {\n    [`${parentClass}:focus &`]: {\n      background: '#fafafa'\n    }\n  },\n});\n```\n\n> 💡 To improve maintainability, each style block can only target a single element. To enforce this, all selectors must target the “&” character which is a reference to the current element.\n>\n> For example, `'&:hover:not(:active)'` and `` [`${parentClass} &`] `` are considered valid, while `'& a[href]'` and `` [`& ${childClass}`] `` are not.\n>\n> If you want to target another scoped class then it should be defined within the style block of that class instead.\n>\n> For example, `` [`& ${childClass}`] `` is invalid since it doesn’t target “&”, so it should instead be defined in the style block for `childClass`.\n>\n> If you want to globally target child nodes within the current element (e.g. `'& a[href]'`), you should use [`globalStyle`](#globalstyle) instead.\n\nFor fallback styles you may simply pass an array of properties instead of a single prop.\n\n```ts\nexport const exampleStyle = style({\n  // in Firefox and IE the \"overflow: overlay\" will be ignored and the \"overflow: auto\" will be applied\n  overflow: ['auto', 'overlay'],\n});\n```\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const primary = style([\n  base,\n  { background: 'blue' }\n]);\n\nexport const secondary = style([\n  base,\n  { background: 'aqua' }\n]);\n```\n\nWhen composed styles are used in selectors, they are assigned an additional class if required so they can be uniquely identified. When selectors are processed internally, the composed classes are removed, only leaving behind the unique identifier classes. This allows you to treat them as if they were a single class within vanilla-extract selectors.\n\n```ts\nimport {\n  style,\n  globalStyle,\n} from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\nexport const container = style([background, padding]);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n### styleVariants\n\nCreates a collection of named style variants.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nexport const variant = styleVariants({\n  primary: { background: 'blue' },\n  secondary: { background: 'aqua' },\n});\n```\n\n> 💡 This is useful for mapping component props to styles, e.g. `<button className={styles.variant[props.variant]}>`\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const variant = styleVariants({\n  primary: [base, { background: 'blue' }],\n  secondary: [base, { background: 'aqua' }],\n});\n```\n\nYou can also transform the values by providing a map function as the second argument.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst backgrounds = {\n  primary: 'blue',\n  secondary: 'aqua'\n} as const;\n\nexport const variant = styleVariants(\n  backgrounds,\n  (background) => [base, { background }]\n);\n```\n\n### globalStyle\n\nCreates styles attached to a global selector.\n\n```ts\nimport { globalStyle } from '@vanilla-extract/css';\n\nglobalStyle('html, body', {\n  margin: 0\n});\n```\n\nGlobal selectors can also contain references to other scoped class names.\n\n```ts\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nglobalStyle(`${parentClass} > a`, {\n  color: 'pink'\n});\n```\n\n### createTheme\n\nCreates a locally scoped theme class and a theme contract which can be consumed within your styles.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can create theme variants by passing a theme contract as the first argument to `createTheme`.\n\n```ts\n// themes.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeA, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\n### createGlobalTheme\n\nCreates a theme attached to a global selector, but with locally scoped variable names.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createGlobalTheme } from '@vanilla-extract/css';\n\nexport const vars = createGlobalTheme(':root', {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\nIf you want to implement an existing theme contract, you can pass it as the second argument.\n\n```ts\n// theme.css.ts\n\nimport {\n  createThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n### createThemeContract\n\nCreates a contract of locally scoped variable names for themes to implement.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n> 💡 This is useful if you want to split your themes into different bundles. In this case, your themes would be defined in separate files, but we'll keep this example simple.\n\n```ts\n// themes.css.ts\n\nimport {\n  createThemeContract,\n  createTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const themeA = createTheme(vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n### createGlobalThemeContract\n\nCreates a contract of globally scoped variable names for themes to implement.\n\n> 💡 This is useful if you want to make your theme contract available to non-JavaScript environments.\n\n```ts\n// themes.css.ts\n\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can also provide a map function as the second argument which has access to the value and the object path.\n\nFor example, you can automatically prefix all variable names.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n}, (value) => `prefix-${value}`);\n```\n\nYou can also use the map function to automatically generate names from the object path, joining keys with a hyphen.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n}, (_value, path) => `prefix-${path.join('-')}`);\n```\n\n### assignVars\n\nAssigns a collection of CSS Variables anywhere within a style block.\n\n> 💡 This is useful for creating responsive themes since it can be used within `@media` blocks.\n\n```ts\nimport { createThemeContract, style, assignVars } from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  space: {\n    small: null,\n    medium: null,\n    large: null\n  }\n});\n\nexport const responsiveSpaceTheme = style({\n  vars: assignVars(vars.space, {\n    small: '4px',\n    medium: '8px',\n    large: '16px'\n  }),\n  '@media': {\n    'screen and (min-width: 1024px)': {\n      vars: assignVars(vars.space, {\n        small: '8px',\n        medium: '16px',\n        large: '32px'\n      })\n    }\n  }\n});\n```\n\n> 💡 All variables passed into this function must be assigned or it’s a type error.\n\n### createVar\n\nCreates a single CSS Variable.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: colorVar\n});\n```\n\nScoped variables can be set using the `vars` key.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\nimport { colorVar } from './vars.css.ts';\n\nexport const parentStyle = style({\n  vars: {\n    [colorVar]: 'blue'\n  }\n});\n```\n\n### fallbackVar\n\nProvides fallback values when consuming variables.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(colorVar, 'blue'),\n});\n```\n\nMultiple fallbacks are also supported.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const primaryColorVar = createVar();\nexport const secondaryColorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(primaryColorVar, secondaryColorVar, 'blue'),\n});\n```\n\n### fontFace\n\nCreates a custom font attached to a locally scoped font name.\n\n```ts\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst myFont = fontFace({\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: myFont\n});\n```\n\n### globalFontFace\n\nCreates a globally scoped custom font.\n\n```ts\nimport {\n  globalFontFace,\n  style\n} from '@vanilla-extract/css';\n\nglobalFontFace('MyGlobalFont', {\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: 'MyGlobalFont'\n});\n```\n\n### keyframes\n\nCreates a locally scoped set of keyframes.\n\n```ts\nimport { keyframes, style } from '@vanilla-extract/css';\n\nconst rotate = keyframes({\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite ${rotate}`,\n});\n```\n\n### globalKeyframes\n\nCreates a globally scoped set of keyframes.\n\n```ts\nimport { globalKeyframes, style } from '@vanilla-extract/css';\n\nglobalKeyframes('rotate', {\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite rotate`,\n});\n```\n\n## Recipes API\n\nCreate multi-variant styles with a type-safe runtime API, heavily inspired by [Stitches.](https://stitches.dev)\n\nAs with the rest of vanilla-extract, all styles are generated at build time.\n\n```bash\n$ npm install @vanilla-extract/recipes\n```\n\n### recipe\n\nCreates a multi-variant style function that can be used at runtime or statically in `.css.ts` files.\n\nAccepts an optional set of `base` styles, `variants`, `compoundVariants` and `defaultVariants`.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\n\nexport const button = recipe({\n  base: {\n    borderRadius: 6\n  },\n\n  variants: {\n    color: {\n      neutral: { background: 'whitesmoke' },\n      brand: { background: 'blueviolet' },\n      accent: { background: 'slateblue' }\n    },\n    size: {\n      small: { padding: 12 },\n      medium: { padding: 16 },\n      large: { padding: 24 }\n    },\n    rounded: {\n      true: { borderRadius: 999 }\n    }\n  },\n\n  // Applied when multiple variants are set at once\n  compoundVariants: [\n    {\n      variants: {\n        color: 'neutral',\n        size: 'large'\n      },\n      style: {\n        background: 'ghostwhite'\n      }\n    }\n  ],\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\nWith this recipe configured, you can now use it in your templates.\n\n```ts\nimport { button } from './button.css.ts';\n\ndocument.write(`\n  <button class=\"${button({\n    color: 'accent',\n    size: 'large',\n    rounded: true\n  })}\">\n    Hello world\n  </button>\n`);\n```\n\nYour recipe configuration can also make use of existing variables, classes and styles.\n\nFor example, you can pass in the result of your [`sprinkles`](https://vanilla-extract.style/documentation/packages/sprinkles) function directly.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\nimport { reset } from './reset.css.ts';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const button = recipe({\n  base: [reset, sprinkles({ borderRadius: 'round' })],\n\n  variants: {\n    color: {\n      neutral: sprinkles({ background: 'neutral' }),\n      brand: sprinkles({ background: 'brand' }),\n      accent: sprinkles({ background: 'accent' })\n    },\n    size: {\n      small: sprinkles({ padding: 'small' }),\n      medium: sprinkles({ padding: 'medium' }),\n      large: sprinkles({ padding: 'large' })\n    }\n  },\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\n## Dynamic API\n\nDynamically update theme variables at runtime.\n\n```bash\nnpm install @vanilla-extract/dynamic\n```\n\n### assignInlineVars\n\nAssigns CSS Variables as inline styles.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars({\n      [vars.colors.brand]: 'pink',\n      [vars.colors.accent]: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nYou can also assign collections of variables by passing a theme contract as the first argument. All variables must be assigned or it’s a type error.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars(vars.colors, {\n      brand: 'pink',\n      accent: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nEven though this function returns an object of inline styles, its `toString` method returns a valid `style` attribute value so that it can be used in string templates.\n\n```tsx\n// app.ts\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\ndocument.write(`\n  <section style=\"${assignInlineVars({\n    [vars.colors.brand]: 'pink',\n    [vars.colors.accent]: 'green'\n  })}\">\n    ...\n  </section>\n`);\n```\n\n### setElementVars\n\nSets CSS Variables on a DOM element.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, {\n  [vars.colors.brand]: 'pink',\n  [vars.colors.accent]: 'green'\n});\n```\n\nYou can also set collections of variables by passing a theme contract as the second argument. All variables must be set or it’s a type error.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, vars.colors, {\n  brand: 'pink',\n  accent: 'green'\n});\n```\n\n## Utility functions\n\nWe also provide a standalone package of optional utility functions to make it easier to work with CSS in TypeScript.\n\n> 💡 This package can be used with any CSS-in-JS library.\n\n```bash\nnpm install @vanilla-extract/css-utils\n```\n\n### calc\n\nStreamlines the creation of CSS calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  height: calc.multiply('var(--grid-unit)', 2)\n};\n```\n\nThe following functions are available.\n\n- `calc.add`\n- `calc.subtract`\n- `calc.multiply`\n- `calc.divide`\n- `calc.negate`\n\nThe `calc` export is also a function, providing a chainable API for complex calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  marginTop: calc('var(--space-large)')\n    .divide(2)\n    .negate()\n    .toString()\n};\n```\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-get-crackling-202281912152","_integrity":"sha512-/y6Bx3GBjBp3BWQDN/zTTlpfBN/s2ZN5y3de9ZSx6eOXx3NGEfkUcItDn2OQ8DP8PUCyFQ3lw5oKs+9VN479cg==","_resolved":"/tmp/6726bb26b62a721e81f52449cf5a436b/vanilla-extract-private-0.0.0-get-crackling-202281912152.tgz","_from":"file:vanilla-extract-private-0.0.0-get-crackling-202281912152.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-/y6Bx3GBjBp3BWQDN/zTTlpfBN/s2ZN5y3de9ZSx6eOXx3NGEfkUcItDn2OQ8DP8PUCyFQ3lw5oKs+9VN479cg==","shasum":"6b6902e459287c0ca8d9c4f1482089202f7bf413","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-get-crackling-202281912152.tgz","fileCount":6,"unpackedSize":34553,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaK70xGICw7Yl0Urb0ZCwnlF8oeSlQQQLc1JDykLZI3AIgdvJmHFUDgu0jbGAmNOs39K9jikzF+UZetpQSQPLBZII="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjJ8TWACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqrnA//blmS9jAh/D05QICgHaGwGta0Jthp813sFdcxdbH9N4BC9/OQ\r\n8g3Zf1GgKnyIIC8shuC8HffzyYfrQmWb45mcMW6Cpgh9eOQYLr6JkWsCT/jN\r\nkLu0rHf4OpjcJDwcWC59KNY6netKwcit8RMQraLRR9nqOLtZNnxv3jTBSAFZ\r\nKraci8+PDpnjzMkHHxMlGhwhXCanpn2I/fagmNJOAZOoHo2e2nYSF1Md6Y8u\r\nkBGVza5IO0uhsTaGioWNgoFvEGcN0m48AGAQj56X0uCduIwJA824U18mORw6\r\ny0VeRbFtEt3wGOjpTRvYtdLWgfSN2vtiFawFGBaRKaKPgWz8JW02XOUWvHkj\r\n0Ol2IVuLO2+WwiAFAFJdPEdnOZHBHYUfyTpLfLSC9V8o3xuBX9EwVNotY0s3\r\nd3om5zItnNe41zMJdl+XHYSBUrB8DYpwYeK8Ap8CPGFBPVL3NoNBesv/lsLj\r\nDYet/9I9+PjRQq5xZ97iung0oXrea8E08aW6lds5jKv11zb1HhA/I9nCvlKs\r\nbkTU4Bomq1BijVAd4vXIQfgtRZo3wxi2pQxysaezBvwt22v1rXguG2mEARWI\r\nfw4z9bfcwZBwWGF2J6VD4/QM5L7St6TGPlhd/xOIzPxweZZ7y83xHO4NaEy/\r\nfT7gsSsxMFcbnPwXjKA/UluJj1iYttnQ5dw=\r\n=ZSdJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-get-crackling-202281912152_1663550677928_0.6825279521692711"},"_hasShrinkwrap":false},"0.0.0-get-crackling-202281935912":{"name":"@vanilla-extract/private","version":"0.0.0-get-crackling-202281935912","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/index.cjs","module":"dist/index.mjs","repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","devDependencies":{"@crackle/cli":"^0.8.0"},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.mjs"},"require":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.cjs"}}},"scripts":{"build":"crackle package"},"readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/seek-oss/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](#setup) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n- [Setup](#setup)\n  - [webpack](#webpack)\n  - [esbuild](#esbuild)\n  - [Vite](#vite)\n  - [Next.js](#nextjs)\n  - [Gatsby](#gatsby)\n  - [Rollup](#rollup)\n  - [Test environments](#test-environments)\n  - [Configuration](#configuration)\n    - [identifiers](#identifiers)\n    - [esbuildOptions](#esbuildoptions)\n- [Styling API](#styling-api)\n  - [style](#style)\n  - [styleVariants](#stylevariants)\n  - [globalStyle](#globalstyle)\n  - [createTheme](#createtheme)\n  - [createGlobalTheme](#createglobaltheme)\n  - [createThemeContract](#createthemecontract)\n  - [createGlobalThemeContract](#createglobalthemecontract)\n  - [assignVars](#assignvars)\n  - [createVar](#createvar)\n  - [fallbackVar](#fallbackvar)\n  - [fontFace](#fontface)\n  - [globalFontFace](#globalfontface)\n  - [keyframes](#keyframes)\n  - [globalKeyframes](#globalkeyframes)\n- [Recipes API](#recipes-api)\n  - [recipe](#recipe)\n- [Dynamic API](#dynamic-api)\n  - [assignInlineVars](#assigninlinevars)\n  - [setElementVars](#setelementvars)\n- [Utility functions](#utility-functions)\n  - [calc](#calc)\n- [Thanks](#thanks)\n- [License](#license)\n\n---\n\n## Setup\n\nThere are currently a few integrations to choose from.\n\n### webpack\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/webpack-plugin\n```\n\n2. Add the [webpack](https://webpack.js.org) plugin.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n\nmodule.exports = {\n  plugins: [new VanillaExtractPlugin()],\n};\n```\n\n<details>\n  <summary>You'll need to ensure you're handling CSS files in your webpack config.</summary>\n\n  <br/>\n  For example:\n  \n  ```js\n  const { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n  const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n  module.exports = {\n    plugins: [\n      new VanillaExtractPlugin(),\n      new MiniCssExtractPlugin()\n    ],\n    module: {\n      rules: [\n        {\n          test: /\\.vanilla\\.css$/i, // Targets only CSS files generated by vanilla-extract\n          use: [\n            MiniCssExtractPlugin.loader,\n            {\n              loader: require.resolve('css-loader'),\n              options: {\n                url: false // Required as image imports should be handled via JS/TS import statements\n              }\n            }\n          ]\n        }\n      ]\n    }\n  };\n  ```\n</details>\n\n3. If you'd like automatic debuggable identifiers, you can add the [Babel](https://babeljs.io) plugin.\n   \n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### esbuild\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/esbuild-plugin\n```\n\n2. Add the [esbuild](https://esbuild.github.io/) plugin to your build script.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { vanillaExtractPlugin } = require('@vanilla-extract/esbuild-plugin');\n\nrequire('esbuild').build({\n  entryPoints: ['app.ts'],\n  bundle: true,\n  plugins: [vanillaExtractPlugin()],\n  outfile: 'out.js',\n}).catch(() => process.exit(1))\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n3. Process CSS\n\nAs [esbuild](https://esbuild.github.io/) currently doesn't have a way to process the CSS generated by vanilla-extract, you can optionally use the `processCss` option.\n\nFor example, to run autoprefixer over the generated CSS.\n\n```js\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\nconst postcss = require('postcss');\nconst autoprefixer = require('autoprefixer');\n\nasync function processCss(css) {\n  const result = await postcss([autoprefixer]).process(\n    css,\n    {\n      from: undefined /* suppress source map warning */\n    }\n  );\n\n  return result.css;\n}\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.ts'],\n    bundle: true,\n    plugins: [\n      vanillaExtractPlugin({\n        processCss\n      })\n    ],\n    outfile: 'out.js'\n  })\n  .catch(() => process.exit(1));\n```\n\n### Vite\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/vite-plugin\n```\n\n2. Add the [Vite](https://vitejs.dev/) plugin to your Vite config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\n// vite.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n### Next.js\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/babel-plugin @vanilla-extract/next-plugin\n```\n\n2. If you don't have a `next.config.js` file in the root of your project, create one. Add the [Next.js](https://nextjs.org) plugin to your `next.config.js` file.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(nextConfig);\n```\n\nIf required, this plugin can be composed with other plugins.\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\nconst withMDX = require('@next/mdx')({\n  extension: /\\.mdx$/\n});\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(withMDX(nextConfig));\n```\n\n3. (Optional) If you want to automatically generate debug IDs during development, you can add the [Babel](https://babeljs.io) plugin. Note that this step will cause Next.js to switch from [SWC](https://github.com/swc-project/swc) to Babel, increasing build times. This may or may not be an issue depending on the size of your project.\n\n> Note: While optional for Next.js, the Babel plugin is still required when trying to run `.css.ts` files in Node for unit testing since the files are no longer being processed by a bundler.\n\nIf you don't have a `.babelrc` file in the root of your project, create one. Add the Babel plugin to your `.babelrc` file, ensuring that you're also including `\"next/babel\"` in your `presets` array.\n\n```json\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### Gatsby\n\nTo add to your [Gatsby](https://www.gatsbyjs.com) site, use the [gatsby-plugin-vanilla-extract](https://github.com/gatsby-uc/plugins/tree/main/packages/gatsby-plugin-vanilla-extract) plugin.\n\n### Rollup\n\n> Note: This option is useful for library development but not suitable for application bundles.\n> Rollup has no built-in CSS bundling, so this plugin just outputs styles as individual CSS assets.\n> For applications we instead recommend to use Vite\n> (which itself uses Rollup under the hood but comes with its own CSS bundling).\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/rollup-plugin\n```\n\n2. Add the [Rollup](https://rollupjs.org/) plugin to your Rollup config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\n// rollup.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n### Test environments\n\n1. Install the dependencies.\n\n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n2. Add the [Babel](https://babeljs.io) plugin.\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n3. Disable runtime styles (Optional)\n\nIn testing environments (like `jsdom`) vanilla-extract will create and insert styles. While this is often desirable, it can be a major slowdown in your tests. If your tests don’t require styles to be available, the `disableRuntimeStyles` import will disable all style creation.\n\n```ts\n// setupTests.ts\nimport '@vanilla-extract/css/disableRuntimeStyles';\n```\n\n### Configuration\n\n#### identifiers\n\nDifferent formatting of identifiers (e.g. class names, keyframes, CSS Vars, etc) can be configured by selecting from the following options:\n\n- `short` identifiers are a 7+ character hash. e.g. `hnw5tz3`\n- `debug` identifiers contain human readable prefixes representing the owning filename and a potential rule level debug name. e.g. `myfile_mystyle_hnw5tz3`\n\nEach integration will set a default value based on the configuration options passed to the bundler.\n\n### esbuildOptions\n> Only for `esbuild`, `vite` and `rollup` plugins\n\nesbuild is used internally to compile `.css.ts` files before evaluating them to extract styles. You can pass additional options here to customize that process.\nAccepts a subset of esbuild build options (`plugins`, `external`, `define` and `loader`), see https://esbuild.github.io/api/#build-api.\n\n---\n\n## Styling API\n\n> 🍬 If you're a [treat](https://seek-oss.github.io/treat) user, check out our [migration guide.](./docs/treat-migration-guide.md)\n\n### style\n\nCreates styles attached to a locally scoped class name.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const className = style({\n  display: 'flex'\n});\n```\n\nCSS Variables, simple pseudos, selectors and media/feature queries are all supported.\n\n```ts\nimport { style } from '@vanilla-extract/css';\nimport { vars } from './vars.css.ts';\n\nexport const className = style({\n  display: 'flex',\n  vars: {\n    [vars.localVar]: 'green',\n    '--global-variable': 'purple'\n  },\n  ':hover': {\n    color: 'red'\n  },\n  selectors: {\n    '&:nth-child(2n)': {\n      background: '#fafafa'\n    }\n  },\n  '@media': {\n    'screen and (min-width: 768px)': {\n      padding: 10\n    }\n  },\n  '@supports': {\n    '(display: grid)': {\n      display: 'grid'\n    }\n  }\n});\n```\n\nSelectors can also contain references to other scoped class names.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nexport const childClass = style({\n  selectors: {\n    [`${parentClass}:focus &`]: {\n      background: '#fafafa'\n    }\n  },\n});\n```\n\n> 💡 To improve maintainability, each style block can only target a single element. To enforce this, all selectors must target the “&” character which is a reference to the current element.\n>\n> For example, `'&:hover:not(:active)'` and `` [`${parentClass} &`] `` are considered valid, while `'& a[href]'` and `` [`& ${childClass}`] `` are not.\n>\n> If you want to target another scoped class then it should be defined within the style block of that class instead.\n>\n> For example, `` [`& ${childClass}`] `` is invalid since it doesn’t target “&”, so it should instead be defined in the style block for `childClass`.\n>\n> If you want to globally target child nodes within the current element (e.g. `'& a[href]'`), you should use [`globalStyle`](#globalstyle) instead.\n\nFor fallback styles you may simply pass an array of properties instead of a single prop.\n\n```ts\nexport const exampleStyle = style({\n  // in Firefox and IE the \"overflow: overlay\" will be ignored and the \"overflow: auto\" will be applied\n  overflow: ['auto', 'overlay'],\n});\n```\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const primary = style([\n  base,\n  { background: 'blue' }\n]);\n\nexport const secondary = style([\n  base,\n  { background: 'aqua' }\n]);\n```\n\nWhen composed styles are used in selectors, they are assigned an additional class if required so they can be uniquely identified. When selectors are processed internally, the composed classes are removed, only leaving behind the unique identifier classes. This allows you to treat them as if they were a single class within vanilla-extract selectors.\n\n```ts\nimport {\n  style,\n  globalStyle,\n} from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\nexport const container = style([background, padding]);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n### styleVariants\n\nCreates a collection of named style variants.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nexport const variant = styleVariants({\n  primary: { background: 'blue' },\n  secondary: { background: 'aqua' },\n});\n```\n\n> 💡 This is useful for mapping component props to styles, e.g. `<button className={styles.variant[props.variant]}>`\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const variant = styleVariants({\n  primary: [base, { background: 'blue' }],\n  secondary: [base, { background: 'aqua' }],\n});\n```\n\nYou can also transform the values by providing a map function as the second argument.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst backgrounds = {\n  primary: 'blue',\n  secondary: 'aqua'\n} as const;\n\nexport const variant = styleVariants(\n  backgrounds,\n  (background) => [base, { background }]\n);\n```\n\n### globalStyle\n\nCreates styles attached to a global selector.\n\n```ts\nimport { globalStyle } from '@vanilla-extract/css';\n\nglobalStyle('html, body', {\n  margin: 0\n});\n```\n\nGlobal selectors can also contain references to other scoped class names.\n\n```ts\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nglobalStyle(`${parentClass} > a`, {\n  color: 'pink'\n});\n```\n\n### createTheme\n\nCreates a locally scoped theme class and a theme contract which can be consumed within your styles.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can create theme variants by passing a theme contract as the first argument to `createTheme`.\n\n```ts\n// themes.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeA, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\n### createGlobalTheme\n\nCreates a theme attached to a global selector, but with locally scoped variable names.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createGlobalTheme } from '@vanilla-extract/css';\n\nexport const vars = createGlobalTheme(':root', {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\nIf you want to implement an existing theme contract, you can pass it as the second argument.\n\n```ts\n// theme.css.ts\n\nimport {\n  createThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n### createThemeContract\n\nCreates a contract of locally scoped variable names for themes to implement.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n> 💡 This is useful if you want to split your themes into different bundles. In this case, your themes would be defined in separate files, but we'll keep this example simple.\n\n```ts\n// themes.css.ts\n\nimport {\n  createThemeContract,\n  createTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const themeA = createTheme(vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n### createGlobalThemeContract\n\nCreates a contract of globally scoped variable names for themes to implement.\n\n> 💡 This is useful if you want to make your theme contract available to non-JavaScript environments.\n\n```ts\n// themes.css.ts\n\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can also provide a map function as the second argument which has access to the value and the object path.\n\nFor example, you can automatically prefix all variable names.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n}, (value) => `prefix-${value}`);\n```\n\nYou can also use the map function to automatically generate names from the object path, joining keys with a hyphen.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n}, (_value, path) => `prefix-${path.join('-')}`);\n```\n\n### assignVars\n\nAssigns a collection of CSS Variables anywhere within a style block.\n\n> 💡 This is useful for creating responsive themes since it can be used within `@media` blocks.\n\n```ts\nimport { createThemeContract, style, assignVars } from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  space: {\n    small: null,\n    medium: null,\n    large: null\n  }\n});\n\nexport const responsiveSpaceTheme = style({\n  vars: assignVars(vars.space, {\n    small: '4px',\n    medium: '8px',\n    large: '16px'\n  }),\n  '@media': {\n    'screen and (min-width: 1024px)': {\n      vars: assignVars(vars.space, {\n        small: '8px',\n        medium: '16px',\n        large: '32px'\n      })\n    }\n  }\n});\n```\n\n> 💡 All variables passed into this function must be assigned or it’s a type error.\n\n### createVar\n\nCreates a single CSS Variable.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: colorVar\n});\n```\n\nScoped variables can be set using the `vars` key.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\nimport { colorVar } from './vars.css.ts';\n\nexport const parentStyle = style({\n  vars: {\n    [colorVar]: 'blue'\n  }\n});\n```\n\n### fallbackVar\n\nProvides fallback values when consuming variables.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(colorVar, 'blue'),\n});\n```\n\nMultiple fallbacks are also supported.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const primaryColorVar = createVar();\nexport const secondaryColorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(primaryColorVar, secondaryColorVar, 'blue'),\n});\n```\n\n### fontFace\n\nCreates a custom font attached to a locally scoped font name.\n\n```ts\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst myFont = fontFace({\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: myFont\n});\n```\n\n### globalFontFace\n\nCreates a globally scoped custom font.\n\n```ts\nimport {\n  globalFontFace,\n  style\n} from '@vanilla-extract/css';\n\nglobalFontFace('MyGlobalFont', {\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: 'MyGlobalFont'\n});\n```\n\n### keyframes\n\nCreates a locally scoped set of keyframes.\n\n```ts\nimport { keyframes, style } from '@vanilla-extract/css';\n\nconst rotate = keyframes({\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite ${rotate}`,\n});\n```\n\n### globalKeyframes\n\nCreates a globally scoped set of keyframes.\n\n```ts\nimport { globalKeyframes, style } from '@vanilla-extract/css';\n\nglobalKeyframes('rotate', {\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite rotate`,\n});\n```\n\n## Recipes API\n\nCreate multi-variant styles with a type-safe runtime API, heavily inspired by [Stitches.](https://stitches.dev)\n\nAs with the rest of vanilla-extract, all styles are generated at build time.\n\n```bash\n$ npm install @vanilla-extract/recipes\n```\n\n### recipe\n\nCreates a multi-variant style function that can be used at runtime or statically in `.css.ts` files.\n\nAccepts an optional set of `base` styles, `variants`, `compoundVariants` and `defaultVariants`.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\n\nexport const button = recipe({\n  base: {\n    borderRadius: 6\n  },\n\n  variants: {\n    color: {\n      neutral: { background: 'whitesmoke' },\n      brand: { background: 'blueviolet' },\n      accent: { background: 'slateblue' }\n    },\n    size: {\n      small: { padding: 12 },\n      medium: { padding: 16 },\n      large: { padding: 24 }\n    },\n    rounded: {\n      true: { borderRadius: 999 }\n    }\n  },\n\n  // Applied when multiple variants are set at once\n  compoundVariants: [\n    {\n      variants: {\n        color: 'neutral',\n        size: 'large'\n      },\n      style: {\n        background: 'ghostwhite'\n      }\n    }\n  ],\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\nWith this recipe configured, you can now use it in your templates.\n\n```ts\nimport { button } from './button.css.ts';\n\ndocument.write(`\n  <button class=\"${button({\n    color: 'accent',\n    size: 'large',\n    rounded: true\n  })}\">\n    Hello world\n  </button>\n`);\n```\n\nYour recipe configuration can also make use of existing variables, classes and styles.\n\nFor example, you can pass in the result of your [`sprinkles`](https://vanilla-extract.style/documentation/packages/sprinkles) function directly.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\nimport { reset } from './reset.css.ts';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const button = recipe({\n  base: [reset, sprinkles({ borderRadius: 'round' })],\n\n  variants: {\n    color: {\n      neutral: sprinkles({ background: 'neutral' }),\n      brand: sprinkles({ background: 'brand' }),\n      accent: sprinkles({ background: 'accent' })\n    },\n    size: {\n      small: sprinkles({ padding: 'small' }),\n      medium: sprinkles({ padding: 'medium' }),\n      large: sprinkles({ padding: 'large' })\n    }\n  },\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\n## Dynamic API\n\nDynamically update theme variables at runtime.\n\n```bash\nnpm install @vanilla-extract/dynamic\n```\n\n### assignInlineVars\n\nAssigns CSS Variables as inline styles.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars({\n      [vars.colors.brand]: 'pink',\n      [vars.colors.accent]: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nYou can also assign collections of variables by passing a theme contract as the first argument. All variables must be assigned or it’s a type error.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars(vars.colors, {\n      brand: 'pink',\n      accent: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nEven though this function returns an object of inline styles, its `toString` method returns a valid `style` attribute value so that it can be used in string templates.\n\n```tsx\n// app.ts\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\ndocument.write(`\n  <section style=\"${assignInlineVars({\n    [vars.colors.brand]: 'pink',\n    [vars.colors.accent]: 'green'\n  })}\">\n    ...\n  </section>\n`);\n```\n\n### setElementVars\n\nSets CSS Variables on a DOM element.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, {\n  [vars.colors.brand]: 'pink',\n  [vars.colors.accent]: 'green'\n});\n```\n\nYou can also set collections of variables by passing a theme contract as the second argument. All variables must be set or it’s a type error.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, vars.colors, {\n  brand: 'pink',\n  accent: 'green'\n});\n```\n\n## Utility functions\n\nWe also provide a standalone package of optional utility functions to make it easier to work with CSS in TypeScript.\n\n> 💡 This package can be used with any CSS-in-JS library.\n\n```bash\nnpm install @vanilla-extract/css-utils\n```\n\n### calc\n\nStreamlines the creation of CSS calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  height: calc.multiply('var(--grid-unit)', 2)\n};\n```\n\nThe following functions are available.\n\n- `calc.add`\n- `calc.subtract`\n- `calc.multiply`\n- `calc.divide`\n- `calc.negate`\n\nThe `calc` export is also a function, providing a chainable API for complex calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  marginTop: calc('var(--space-large)')\n    .divide(2)\n    .negate()\n    .toString()\n};\n```\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-get-crackling-202281935912","_integrity":"sha512-mKSZssIHQbPHks5SnsVCku1XOaaS5xe6dvGNeAzBBpEclCcKwQrHTR8hFfWnuVDVdXqtOFMOc80vWZFrcXSu1Q==","_resolved":"/tmp/45a5a7558f2b586ee1338167c32d4bc6/vanilla-extract-private-0.0.0-get-crackling-202281935912.tgz","_from":"file:vanilla-extract-private-0.0.0-get-crackling-202281935912.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-mKSZssIHQbPHks5SnsVCku1XOaaS5xe6dvGNeAzBBpEclCcKwQrHTR8hFfWnuVDVdXqtOFMOc80vWZFrcXSu1Q==","shasum":"ebfb344c38d21d58bb526146d820738779452c7b","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-get-crackling-202281935912.tgz","fileCount":6,"unpackedSize":34553,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7EZ/C9MAzf4mP1v991hKjOuRxAQQdfsX2QG2n6P2mKgIgSqteTehZyIHysRX1lY2aswCKRfEjRS6kaUDBJAkl/KQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjJ+mFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqv/Q/7Besp1LXn2SOORLSuH09fK89CgxJC1/SJI7SPf4TbrPCSF1ut\r\nfOryjOBae6yBwwS5G8reDqBZOJfw86pOB3cbtU6LSs+Vf5uXL6jkIgD2i7yQ\r\n8SytbhwngVuG5eIjFd1WzZLBRQ0cpgNbPASgvfwZB6g/oZUnIbvrCRd5h2/U\r\nYY5QfO4MQlD6O8ruRmCVbYbeh9rTug/xUiXJU4TmvGyjSf6wqADaFEw6hLFI\r\ncV7kEqgu5PsccbJauFQQzLhMJjq/4uzko290PfGvqnQCypaUxl97BkQO3tHa\r\nc96oZFKzXSOzLi0uFETh2VVj/jWe6G9iu4+mljXQPdyMdwX9Lw7cuoP3w2F2\r\nstgUDDkJ36ykiEw+f6n8e+KQdiXls1c9tEXMk0PeyeblVTWfgiCEv5g1sCVT\r\n6LxWD96LFTOQTCmAVSY2QxrHiin/JGwsMRiKhrat5s78jR8Yj39dhDMHUkNe\r\ngLCFNIPPXIwAbaE7EibAQWtK0AOiCZqYcuJbXLq3PCmX6VXMRjga6bJAv2Ls\r\nqF1kswAlsu8HH1P+eZlK6jxOAAEHapMqPkr0DS1rNUB+2LXsS6CpYSs9GtAd\r\nlmHgipbc00jhERzusxszJMFQezIMncsy9+//iaMl0zpvfpBpMxidBpMfcC7u\r\nZgSypdtX2teTb3kaOJ4e8Wn4X+o08+Gt6dg=\r\n=+K1v\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-get-crackling-202281935912_1663560068828_0.5294708497650904"},"_hasShrinkwrap":false},"0.0.0-get-crackling-202281955846":{"name":"@vanilla-extract/private","version":"0.0.0-get-crackling-202281955846","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/index.cjs","module":"dist/index.mjs","repository":{"type":"git","url":"git+https://github.com/seek-oss/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","devDependencies":{"@crackle/cli":"^0.8.0"},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.mjs"},"require":{"types":"./dist/index.cjs.d.ts","default":"./dist/index.cjs"}}},"scripts":{"build":"crackle package"},"readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/seek-oss/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](#setup) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n- [Setup](#setup)\n  - [webpack](#webpack)\n  - [esbuild](#esbuild)\n  - [Vite](#vite)\n  - [Next.js](#nextjs)\n  - [Gatsby](#gatsby)\n  - [Rollup](#rollup)\n  - [Test environments](#test-environments)\n  - [Configuration](#configuration)\n    - [identifiers](#identifiers)\n    - [esbuildOptions](#esbuildoptions)\n- [Styling API](#styling-api)\n  - [style](#style)\n  - [styleVariants](#stylevariants)\n  - [globalStyle](#globalstyle)\n  - [createTheme](#createtheme)\n  - [createGlobalTheme](#createglobaltheme)\n  - [createThemeContract](#createthemecontract)\n  - [createGlobalThemeContract](#createglobalthemecontract)\n  - [assignVars](#assignvars)\n  - [createVar](#createvar)\n  - [fallbackVar](#fallbackvar)\n  - [fontFace](#fontface)\n  - [globalFontFace](#globalfontface)\n  - [keyframes](#keyframes)\n  - [globalKeyframes](#globalkeyframes)\n- [Recipes API](#recipes-api)\n  - [recipe](#recipe)\n- [Dynamic API](#dynamic-api)\n  - [assignInlineVars](#assigninlinevars)\n  - [setElementVars](#setelementvars)\n- [Utility functions](#utility-functions)\n  - [calc](#calc)\n- [Thanks](#thanks)\n- [License](#license)\n\n---\n\n## Setup\n\nThere are currently a few integrations to choose from.\n\n### webpack\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/webpack-plugin\n```\n\n2. Add the [webpack](https://webpack.js.org) plugin.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n\nmodule.exports = {\n  plugins: [new VanillaExtractPlugin()],\n};\n```\n\n<details>\n  <summary>You'll need to ensure you're handling CSS files in your webpack config.</summary>\n\n  <br/>\n  For example:\n  \n  ```js\n  const { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');\n  const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n  module.exports = {\n    plugins: [\n      new VanillaExtractPlugin(),\n      new MiniCssExtractPlugin()\n    ],\n    module: {\n      rules: [\n        {\n          test: /\\.vanilla\\.css$/i, // Targets only CSS files generated by vanilla-extract\n          use: [\n            MiniCssExtractPlugin.loader,\n            {\n              loader: require.resolve('css-loader'),\n              options: {\n                url: false // Required as image imports should be handled via JS/TS import statements\n              }\n            }\n          ]\n        }\n      ]\n    }\n  };\n  ```\n</details>\n\n3. If you'd like automatic debuggable identifiers, you can add the [Babel](https://babeljs.io) plugin.\n   \n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### esbuild\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/esbuild-plugin\n```\n\n2. Add the [esbuild](https://esbuild.github.io/) plugin to your build script.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst { vanillaExtractPlugin } = require('@vanilla-extract/esbuild-plugin');\n\nrequire('esbuild').build({\n  entryPoints: ['app.ts'],\n  bundle: true,\n  plugins: [vanillaExtractPlugin()],\n  outfile: 'out.js',\n}).catch(() => process.exit(1))\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n3. Process CSS\n\nAs [esbuild](https://esbuild.github.io/) currently doesn't have a way to process the CSS generated by vanilla-extract, you can optionally use the `processCss` option.\n\nFor example, to run autoprefixer over the generated CSS.\n\n```js\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\nconst postcss = require('postcss');\nconst autoprefixer = require('autoprefixer');\n\nasync function processCss(css) {\n  const result = await postcss([autoprefixer]).process(\n    css,\n    {\n      from: undefined /* suppress source map warning */\n    }\n  );\n\n  return result.css;\n}\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.ts'],\n    bundle: true,\n    plugins: [\n      vanillaExtractPlugin({\n        processCss\n      })\n    ],\n    outfile: 'out.js'\n  })\n  .catch(() => process.exit(1));\n```\n\n### Vite\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/vite-plugin\n```\n\n2. Add the [Vite](https://vitejs.dev/) plugin to your Vite config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\n// vite.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n> Please note: There are currently no automatic readable class names during development. However, you can still manually provide a debug ID as the last argument to functions that generate scoped styles, e.g. `export const className = style({ ... }, 'className');`\n\n### Next.js\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/babel-plugin @vanilla-extract/next-plugin\n```\n\n2. If you don't have a `next.config.js` file in the root of your project, create one. Add the [Next.js](https://nextjs.org) plugin to your `next.config.js` file.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(nextConfig);\n```\n\nIf required, this plugin can be composed with other plugins.\n\n```js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\nconst withMDX = require('@next/mdx')({\n  extension: /\\.mdx$/\n});\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(withMDX(nextConfig));\n```\n\n3. (Optional) If you want to automatically generate debug IDs during development, you can add the [Babel](https://babeljs.io) plugin. Note that this step will cause Next.js to switch from [SWC](https://github.com/swc-project/swc) to Babel, increasing build times. This may or may not be an issue depending on the size of your project.\n\n> Note: While optional for Next.js, the Babel plugin is still required when trying to run `.css.ts` files in Node for unit testing since the files are no longer being processed by a bundler.\n\nIf you don't have a `.babelrc` file in the root of your project, create one. Add the Babel plugin to your `.babelrc` file, ensuring that you're also including `\"next/babel\"` in your `presets` array.\n\n```json\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n### Gatsby\n\nTo add to your [Gatsby](https://www.gatsbyjs.com) site, use the [gatsby-plugin-vanilla-extract](https://github.com/gatsby-uc/plugins/tree/main/packages/gatsby-plugin-vanilla-extract) plugin.\n\n### Rollup\n\n> Note: This option is useful for library development but not suitable for application bundles.\n> Rollup has no built-in CSS bundling, so this plugin just outputs styles as individual CSS assets.\n> For applications we instead recommend to use Vite\n> (which itself uses Rollup under the hood but comes with its own CSS bundling).\n\n1. Install the dependencies.\n\n```bash\nnpm install @vanilla-extract/css @vanilla-extract/rollup-plugin\n```\n\n2. Add the [Rollup](https://rollupjs.org/) plugin to your Rollup config.\n\n> 💡 This plugin accepts an optional [configuration object](#configuration).\n\n```js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\n// rollup.config.js\nexport default {\n  plugins: [vanillaExtractPlugin()]\n}\n```\n\n### Test environments\n\n1. Install the dependencies.\n\n```bash\n$ npm install @vanilla-extract/babel-plugin\n```\n\n2. Add the [Babel](https://babeljs.io) plugin.\n\n```json\n{\n  \"plugins\": [\"@vanilla-extract/babel-plugin\"]\n}\n```\n\n3. Disable runtime styles (Optional)\n\nIn testing environments (like `jsdom`) vanilla-extract will create and insert styles. While this is often desirable, it can be a major slowdown in your tests. If your tests don’t require styles to be available, the `disableRuntimeStyles` import will disable all style creation.\n\n```ts\n// setupTests.ts\nimport '@vanilla-extract/css/disableRuntimeStyles';\n```\n\n### Configuration\n\n#### identifiers\n\nDifferent formatting of identifiers (e.g. class names, keyframes, CSS Vars, etc) can be configured by selecting from the following options:\n\n- `short` identifiers are a 7+ character hash. e.g. `hnw5tz3`\n- `debug` identifiers contain human readable prefixes representing the owning filename and a potential rule level debug name. e.g. `myfile_mystyle_hnw5tz3`\n\nEach integration will set a default value based on the configuration options passed to the bundler.\n\n### esbuildOptions\n> Only for `esbuild`, `vite` and `rollup` plugins\n\nesbuild is used internally to compile `.css.ts` files before evaluating them to extract styles. You can pass additional options here to customize that process.\nAccepts a subset of esbuild build options (`plugins`, `external`, `define` and `loader`), see https://esbuild.github.io/api/#build-api.\n\n---\n\n## Styling API\n\n> 🍬 If you're a [treat](https://seek-oss.github.io/treat) user, check out our [migration guide.](./docs/treat-migration-guide.md)\n\n### style\n\nCreates styles attached to a locally scoped class name.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const className = style({\n  display: 'flex'\n});\n```\n\nCSS Variables, simple pseudos, selectors and media/feature queries are all supported.\n\n```ts\nimport { style } from '@vanilla-extract/css';\nimport { vars } from './vars.css.ts';\n\nexport const className = style({\n  display: 'flex',\n  vars: {\n    [vars.localVar]: 'green',\n    '--global-variable': 'purple'\n  },\n  ':hover': {\n    color: 'red'\n  },\n  selectors: {\n    '&:nth-child(2n)': {\n      background: '#fafafa'\n    }\n  },\n  '@media': {\n    'screen and (min-width: 768px)': {\n      padding: 10\n    }\n  },\n  '@supports': {\n    '(display: grid)': {\n      display: 'grid'\n    }\n  }\n});\n```\n\nSelectors can also contain references to other scoped class names.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nexport const childClass = style({\n  selectors: {\n    [`${parentClass}:focus &`]: {\n      background: '#fafafa'\n    }\n  },\n});\n```\n\n> 💡 To improve maintainability, each style block can only target a single element. To enforce this, all selectors must target the “&” character which is a reference to the current element.\n>\n> For example, `'&:hover:not(:active)'` and `` [`${parentClass} &`] `` are considered valid, while `'& a[href]'` and `` [`& ${childClass}`] `` are not.\n>\n> If you want to target another scoped class then it should be defined within the style block of that class instead.\n>\n> For example, `` [`& ${childClass}`] `` is invalid since it doesn’t target “&”, so it should instead be defined in the style block for `childClass`.\n>\n> If you want to globally target child nodes within the current element (e.g. `'& a[href]'`), you should use [`globalStyle`](#globalstyle) instead.\n\nFor fallback styles you may simply pass an array of properties instead of a single prop.\n\n```ts\nexport const exampleStyle = style({\n  // in Firefox and IE the \"overflow: overlay\" will be ignored and the \"overflow: auto\" will be applied\n  overflow: ['auto', 'overlay'],\n});\n```\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const primary = style([\n  base,\n  { background: 'blue' }\n]);\n\nexport const secondary = style([\n  base,\n  { background: 'aqua' }\n]);\n```\n\nWhen composed styles are used in selectors, they are assigned an additional class if required so they can be uniquely identified. When selectors are processed internally, the composed classes are removed, only leaving behind the unique identifier classes. This allows you to treat them as if they were a single class within vanilla-extract selectors.\n\n```ts\nimport {\n  style,\n  globalStyle,\n} from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\nexport const container = style([background, padding]);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n### styleVariants\n\nCreates a collection of named style variants.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nexport const variant = styleVariants({\n  primary: { background: 'blue' },\n  secondary: { background: 'aqua' },\n});\n```\n\n> 💡 This is useful for mapping component props to styles, e.g. `<button className={styles.variant[props.variant]}>`\n\nMultiple styles can be composed into a single rule by providing an array of styles.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const variant = styleVariants({\n  primary: [base, { background: 'blue' }],\n  secondary: [base, { background: 'aqua' }],\n});\n```\n\nYou can also transform the values by providing a map function as the second argument.\n\n```ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst backgrounds = {\n  primary: 'blue',\n  secondary: 'aqua'\n} as const;\n\nexport const variant = styleVariants(\n  backgrounds,\n  (background) => [base, { background }]\n);\n```\n\n### globalStyle\n\nCreates styles attached to a global selector.\n\n```ts\nimport { globalStyle } from '@vanilla-extract/css';\n\nglobalStyle('html, body', {\n  margin: 0\n});\n```\n\nGlobal selectors can also contain references to other scoped class names.\n\n```ts\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nglobalStyle(`${parentClass} > a`, {\n  color: 'pink'\n});\n```\n\n### createTheme\n\nCreates a locally scoped theme class and a theme contract which can be consumed within your styles.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can create theme variants by passing a theme contract as the first argument to `createTheme`.\n\n```ts\n// themes.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeA, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\n### createGlobalTheme\n\nCreates a theme attached to a global selector, but with locally scoped variable names.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n```ts\n// theme.css.ts\n\nimport { createGlobalTheme } from '@vanilla-extract/css';\n\nexport const vars = createGlobalTheme(':root', {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n> 💡 All theme values must be provided or it’s a type error.\n\nIf you want to implement an existing theme contract, you can pass it as the second argument.\n\n```ts\n// theme.css.ts\n\nimport {\n  createThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n### createThemeContract\n\nCreates a contract of locally scoped variable names for themes to implement.\n\n**Ensure this function is called within a `.css.ts` context, otherwise variable names will be mismatched between files.**\n\n> 💡 This is useful if you want to split your themes into different bundles. In this case, your themes would be defined in separate files, but we'll keep this example simple.\n\n```ts\n// themes.css.ts\n\nimport {\n  createThemeContract,\n  createTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const themeA = createTheme(vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n```\n\n### createGlobalThemeContract\n\nCreates a contract of globally scoped variable names for themes to implement.\n\n> 💡 This is useful if you want to make your theme contract available to non-JavaScript environments.\n\n```ts\n// themes.css.ts\n\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\nYou can also provide a map function as the second argument which has access to the value and the object path.\n\nFor example, you can automatically prefix all variable names.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n}, (value) => `prefix-${value}`);\n```\n\nYou can also use the map function to automatically generate names from the object path, joining keys with a hyphen.\n\n```ts\n// themes.css.ts\n\nimport { createGlobalThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n}, (_value, path) => `prefix-${path.join('-')}`);\n```\n\n### assignVars\n\nAssigns a collection of CSS Variables anywhere within a style block.\n\n> 💡 This is useful for creating responsive themes since it can be used within `@media` blocks.\n\n```ts\nimport { createThemeContract, style, assignVars } from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  space: {\n    small: null,\n    medium: null,\n    large: null\n  }\n});\n\nexport const responsiveSpaceTheme = style({\n  vars: assignVars(vars.space, {\n    small: '4px',\n    medium: '8px',\n    large: '16px'\n  }),\n  '@media': {\n    'screen and (min-width: 1024px)': {\n      vars: assignVars(vars.space, {\n        small: '8px',\n        medium: '16px',\n        large: '32px'\n      })\n    }\n  }\n});\n```\n\n> 💡 All variables passed into this function must be assigned or it’s a type error.\n\n### createVar\n\nCreates a single CSS Variable.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: colorVar\n});\n```\n\nScoped variables can be set using the `vars` key.\n\n```ts\nimport { createVar, style } from '@vanilla-extract/css';\nimport { colorVar } from './vars.css.ts';\n\nexport const parentStyle = style({\n  vars: {\n    [colorVar]: 'blue'\n  }\n});\n```\n\n### fallbackVar\n\nProvides fallback values when consuming variables.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(colorVar, 'blue'),\n});\n```\n\nMultiple fallbacks are also supported.\n\n```ts\nimport { createVar, fallbackVar, style } from '@vanilla-extract/css';\n\nexport const primaryColorVar = createVar();\nexport const secondaryColorVar = createVar();\n\nexport const exampleStyle = style({\n  color: fallbackVar(primaryColorVar, secondaryColorVar, 'blue'),\n});\n```\n\n### fontFace\n\nCreates a custom font attached to a locally scoped font name.\n\n```ts\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst myFont = fontFace({\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: myFont\n});\n```\n\n### globalFontFace\n\nCreates a globally scoped custom font.\n\n```ts\nimport {\n  globalFontFace,\n  style\n} from '@vanilla-extract/css';\n\nglobalFontFace('MyGlobalFont', {\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const text = style({\n  fontFamily: 'MyGlobalFont'\n});\n```\n\n### keyframes\n\nCreates a locally scoped set of keyframes.\n\n```ts\nimport { keyframes, style } from '@vanilla-extract/css';\n\nconst rotate = keyframes({\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite ${rotate}`,\n});\n```\n\n### globalKeyframes\n\nCreates a globally scoped set of keyframes.\n\n```ts\nimport { globalKeyframes, style } from '@vanilla-extract/css';\n\nglobalKeyframes('rotate', {\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const animated = style({\n  animation: `3s infinite rotate`,\n});\n```\n\n## Recipes API\n\nCreate multi-variant styles with a type-safe runtime API, heavily inspired by [Stitches.](https://stitches.dev)\n\nAs with the rest of vanilla-extract, all styles are generated at build time.\n\n```bash\n$ npm install @vanilla-extract/recipes\n```\n\n### recipe\n\nCreates a multi-variant style function that can be used at runtime or statically in `.css.ts` files.\n\nAccepts an optional set of `base` styles, `variants`, `compoundVariants` and `defaultVariants`.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\n\nexport const button = recipe({\n  base: {\n    borderRadius: 6\n  },\n\n  variants: {\n    color: {\n      neutral: { background: 'whitesmoke' },\n      brand: { background: 'blueviolet' },\n      accent: { background: 'slateblue' }\n    },\n    size: {\n      small: { padding: 12 },\n      medium: { padding: 16 },\n      large: { padding: 24 }\n    },\n    rounded: {\n      true: { borderRadius: 999 }\n    }\n  },\n\n  // Applied when multiple variants are set at once\n  compoundVariants: [\n    {\n      variants: {\n        color: 'neutral',\n        size: 'large'\n      },\n      style: {\n        background: 'ghostwhite'\n      }\n    }\n  ],\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\nWith this recipe configured, you can now use it in your templates.\n\n```ts\nimport { button } from './button.css.ts';\n\ndocument.write(`\n  <button class=\"${button({\n    color: 'accent',\n    size: 'large',\n    rounded: true\n  })}\">\n    Hello world\n  </button>\n`);\n```\n\nYour recipe configuration can also make use of existing variables, classes and styles.\n\nFor example, you can pass in the result of your [`sprinkles`](https://vanilla-extract.style/documentation/packages/sprinkles) function directly.\n\n```ts\nimport { recipe } from '@vanilla-extract/recipes';\nimport { reset } from './reset.css.ts';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const button = recipe({\n  base: [reset, sprinkles({ borderRadius: 'round' })],\n\n  variants: {\n    color: {\n      neutral: sprinkles({ background: 'neutral' }),\n      brand: sprinkles({ background: 'brand' }),\n      accent: sprinkles({ background: 'accent' })\n    },\n    size: {\n      small: sprinkles({ padding: 'small' }),\n      medium: sprinkles({ padding: 'medium' }),\n      large: sprinkles({ padding: 'large' })\n    }\n  },\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\n## Dynamic API\n\nDynamically update theme variables at runtime.\n\n```bash\nnpm install @vanilla-extract/dynamic\n```\n\n### assignInlineVars\n\nAssigns CSS Variables as inline styles.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars({\n      [vars.colors.brand]: 'pink',\n      [vars.colors.accent]: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nYou can also assign collections of variables by passing a theme contract as the first argument. All variables must be assigned or it’s a type error.\n\n```tsx\n// app.tsx\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars(vars.colors, {\n      brand: 'pink',\n      accent: 'green'\n    })}\n  >\n    ...\n  </section>\n);\n```\n\nEven though this function returns an object of inline styles, its `toString` method returns a valid `style` attribute value so that it can be used in string templates.\n\n```tsx\n// app.ts\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\ndocument.write(`\n  <section style=\"${assignInlineVars({\n    [vars.colors.brand]: 'pink',\n    [vars.colors.accent]: 'green'\n  })}\">\n    ...\n  </section>\n`);\n```\n\n### setElementVars\n\nSets CSS Variables on a DOM element.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, {\n  [vars.colors.brand]: 'pink',\n  [vars.colors.accent]: 'green'\n});\n```\n\nYou can also set collections of variables by passing a theme contract as the second argument. All variables must be set or it’s a type error.\n\n```tsx\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, vars.colors, {\n  brand: 'pink',\n  accent: 'green'\n});\n```\n\n## Utility functions\n\nWe also provide a standalone package of optional utility functions to make it easier to work with CSS in TypeScript.\n\n> 💡 This package can be used with any CSS-in-JS library.\n\n```bash\nnpm install @vanilla-extract/css-utils\n```\n\n### calc\n\nStreamlines the creation of CSS calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  height: calc.multiply('var(--grid-unit)', 2)\n};\n```\n\nThe following functions are available.\n\n- `calc.add`\n- `calc.subtract`\n- `calc.multiply`\n- `calc.divide`\n- `calc.negate`\n\nThe `calc` export is also a function, providing a chainable API for complex calc expressions.\n\n```ts\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  marginTop: calc('var(--space-large)')\n    .divide(2)\n    .negate()\n    .toString()\n};\n```\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/seek-oss/vanilla-extract/issues"},"homepage":"https://github.com/seek-oss/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-get-crackling-202281955846","_integrity":"sha512-0VHSkx4WmFeFz3b6r+3aVugkQQmEZ+sFPnqbjzVAvwd8exI/FlARF//tyqIYHui7o22lfraUWcjm9aMKps+ryw==","_resolved":"/tmp/b8d329a631c1dad6362e841791e49037/vanilla-extract-private-0.0.0-get-crackling-202281955846.tgz","_from":"file:vanilla-extract-private-0.0.0-get-crackling-202281955846.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-0VHSkx4WmFeFz3b6r+3aVugkQQmEZ+sFPnqbjzVAvwd8exI/FlARF//tyqIYHui7o22lfraUWcjm9aMKps+ryw==","shasum":"e024ef6f31237a2919464a5671ca12cb1a47051e","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-get-crackling-202281955846.tgz","fileCount":6,"unpackedSize":34553,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDLg/R08u4rvUqEucg+ILaku0TgBnV3VSXwEIbCZYDtNAiEA8dYvaS9PdW+7VYhmEqGB2yA1WmDUf+W2UJeZdNE1SvA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjKAWXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpdhg//WHlcAdlbZlUhu6KZgnR3GN7ODoM0P5fV2tJnDnVTDg4hBXRk\r\nSiBMhKWu/Cvpx38t65CZRu2hlFowo3DFxbepMluz/9/1xfYWY+XR3JQjYjo4\r\nMISEwCIANTK/rQlO0IFxERIbIdTIBs94jfmJDXqTeWpTNxKQNS8hPiXmWZmM\r\ns6IV62VlKJTRnuERa7sDGtBWgSOsECtEQvFxkQfJdKVa+yERaEDWcXZ7elH+\r\naSdKbQX8R+YwhjWA2yFP/9RNTYwXQMBPclljb4Yu1hazT8D4eI6d6PRk10+x\r\noncI3yQYYSEh0ZnbySfJnTDlHg5QgD8Kr7mtJuq4zdMspZA1Zl7C8VTKWXaM\r\nD8ZTueBWda4MX4w0x0m2OMTB/xaL0bLtOpQ+a/dkm6zWP/QSLTZkCDhFpktK\r\nlXhZwMmRdz56/1jix/5vdQow/WQSUNXgwZbmRHWipowmsf1oNLXlai4xotv7\r\ncOlAAqVlXsU1PqFdRMYg+o+zJY0iCtE5I2tVZPXdIklPGpGBHSe5gktCedAD\r\nY1HGoy038OXccJqJk8aFh1I7YZEhDIBoEh2GpBQANbHsNTQia0ZaFoo8QWuE\r\n7x9wAwSX0DKIXl4JfiAFDNWaG1lM1l8XtI/cjBFfxtIDVMYQ0tf529QdjIwj\r\nCqvugylySkPyHJKmXJ/96kTgn3MC5xvjrmc=\r\n=wBkF\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"seek-oss-ci","email":"opensource@seek.com.au"},"directories":{},"maintainers":[{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"seek-oss-ci","email":"opensource@seek.com.au"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-get-crackling-202281955846_1663567255176_0.5009569288403066"},"_hasShrinkwrap":false},"0.0.0-dts-bundle-202282944525":{"name":"@vanilla-extract/private","version":"0.0.0-dts-bundle-202282944525","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-dts-bundle-202282944525","_integrity":"sha512-eybxKSEZ2shKYbSksnUxy6nBc9/D9CPGOelRVZkUHra5Xl6N/Ko6W+2FEZhEshEy8+4Up5RRn+4/HjjsXF0skg==","_resolved":"/tmp/ff37715d40afc520aea3ce2165d631e6/vanilla-extract-private-0.0.0-dts-bundle-202282944525.tgz","_from":"file:vanilla-extract-private-0.0.0-dts-bundle-202282944525.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-eybxKSEZ2shKYbSksnUxy6nBc9/D9CPGOelRVZkUHra5Xl6N/Ko6W+2FEZhEshEy8+4Up5RRn+4/HjjsXF0skg==","shasum":"d8167b9493c160dc5279651b74415c7bb9950fdc","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-dts-bundle-202282944525.tgz","fileCount":8,"unpackedSize":9771,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCmhkcd4wVs1vBwXjZQWZa0hmAK7a0TL7ozN4G7cCgvDgIgKyYNuNv0e9efEj/k+eCnBMS5WHuIKUH1NAb4aE5JZvs="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjNSM2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpfXg//bryl6AWrRtRUHkw2K9qa39doIT94Dy+EBSfPiknXV/mronC/\r\nGGSQYhU4GrvXA82qUR6rXIrA8F/Kmq62VT0YupL0D6wz23QiETJhRktRCZ7w\r\nAJQEIKWzK6rZ0+1DVCWZVKj9Etyx+kJ7eHhGZgScZup8SKZXLBsWHu/96JaG\r\nroZdnzUYOdVWX7vhRLi/oh0A9AxXFDbiHR9lrc2cw5/8a3GgiGwk2e9kDDZH\r\n3X6ItrrjCNEKPZ6oS4tyynbjyz21rS0FGKFcQEkFls1Zj8oBVHOww5LQ5A9C\r\nyDwKmfNcocLBtJPAnvTEYPkaObbXKD5MxP3lgUl9UYG3q/fZDKnk2CCzqidx\r\npYomWI/zFHZYZA6IvDdqRJdVOMOyXqNeH63bo8FUaPd61iyveOJVqmziiSQN\r\nzecpfwHosmCK0JxopSS4u5nh+tk7YkAFf3v7qhGxtJkCjI2uyhHyT23MKESp\r\nzuGN4E6cB5NPaOEJ6j9hToniQHq8NuT2C7uvbCHL+3MhPC7fJpudfcErSJDU\r\nm52KR4WnsSlMFzCC8bO6o9GQ5gSqEllk6YONQyBxDr/zuRQ+wzjHRwLpj76u\r\nonZzykLVxh52H1TMhMLSHGa25tbUfkKot3TrebkiPDJRmPs2GVcbOdKc1yce\r\n+ibt7dplRFgBXSuMmEbIVwumBShaghF4DK0=\r\n=xfhE\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-dts-bundle-202282944525_1664426805888_0.42412181356359824"},"_hasShrinkwrap":false},"0.0.0-dts-bundle-202282983532":{"name":"@vanilla-extract/private","version":"0.0.0-dts-bundle-202282983532","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-dts-bundle-202282983532","_integrity":"sha512-styyWIytfxUphFVNm6L0i74/DCYV9blAlj7WzJYzcciljyw+cbpXoOr1rL20VJX+0YCAt7/9bCsMC+3c5nYqGQ==","_resolved":"/tmp/17371dcac74964703dd25379ee6f1dc7/vanilla-extract-private-0.0.0-dts-bundle-202282983532.tgz","_from":"file:vanilla-extract-private-0.0.0-dts-bundle-202282983532.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-styyWIytfxUphFVNm6L0i74/DCYV9blAlj7WzJYzcciljyw+cbpXoOr1rL20VJX+0YCAt7/9bCsMC+3c5nYqGQ==","shasum":"0a2e510e2346e981aea6d580e7be1813f531e004","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-dts-bundle-202282983532.tgz","fileCount":8,"unpackedSize":9771,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQeuxW6GE31BpCFkzd4BCb/iIDiACH5W2UBGm6CX2D4AIgQV1gW94tvAdFeNm3ToOVpPd3EK0YIGb7F78rBZAS19E="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjNVjvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrqjg/9Fj89Pvt5FNvj4/iQfAnpnShvgH0kIqVvWna65JKbFZYK1bya\r\n3ooS4IJuxQbeuw51qf5CkA1ZUscW2re/nmirbV3smXiMlBu4BLs2Sh4bTcbT\r\noD649Z/eEJSwElb11qilNT5appQnoKjll5skk29YsVaFAKNQR2wAgdpba+iK\r\nn/8QnNPH0nE27GzPIIiVLy1OwQiSH3mHndAoRgUyYhExSbKyo/F/SH+HA3Ul\r\nBbdNTTB21tK5aXXPQueep60XSIomnTZ+qaHETTfnAEDd5gbhHgM5mRO+1ouF\r\n3JlLdgU73rlpaRYA2bfHJ5NKs4iUns6sXFHiHwLTCDZoQPdZr2ELsrZFS8Wm\r\nyDdsdf6tQX+AguzyZm3ZCvcN8NGJu68l1FvgFZPS56oqUg0/pha0V7wutrpP\r\nrlN1dEh7g401wt0BsOLl2SS/87oxlMJ2gdS8nqWhvZMiAjSHtyZzraDXz3M4\r\ngYBzIFoAEu2dLAQJWMQXF/CMWXK1w8dKFkrSmdMS87mavhMWbLcQQW4/x4d5\r\n4iMOvK3YLFZV13FSJ5DtYwLMfF5A9o5WmtfcjlcYPT06qMhSydMHKihd/7NF\r\nW/yWLaKZ3F/hsMxAtsj6UL+ukmkclwh1uihYeYy5c+MtZyIrWnmbT/WDmohK\r\nCuBMQFjM/IzpkPdYBXelPVFE8wIZvwLD604=\r\n=9aYZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-dts-bundle-202282983532_1664440559254_0.7303704472871289"},"_hasShrinkwrap":false},"0.0.0-dts-bundle-20228303510":{"name":"@vanilla-extract/private","version":"0.0.0-dts-bundle-20228303510","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-dts-bundle-20228303510","_integrity":"sha512-+f2CCVNjnYkBmaM7vfNM5eh9RnjZZcf/5j27oZVZg6rdkUjdxVKdpQ47ThjX6jWsIxB+ii0cP67bknzJKYEg0g==","_resolved":"/tmp/43b7bff997b2c95a33a4dcaa2e560aa8/vanilla-extract-private-0.0.0-dts-bundle-20228303510.tgz","_from":"file:vanilla-extract-private-0.0.0-dts-bundle-20228303510.tgz","_nodeVersion":"16.17.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-+f2CCVNjnYkBmaM7vfNM5eh9RnjZZcf/5j27oZVZg6rdkUjdxVKdpQ47ThjX6jWsIxB+ii0cP67bknzJKYEg0g==","shasum":"0552f93dbe642cc790333c232dfa4afd281fa7fc","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-dts-bundle-20228303510.tgz","fileCount":8,"unpackedSize":9770,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDnYPF/F5B7Z65G1JwIq0WCghrg3J/o1rJMNWnw3oY+lAIgfhyoyS2FyDdu3UY6QAkR205UBXd5FCmz8mNCqkamtgA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjNmfEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpFRxAAhNiUqVlG7HCh+y/0iXBk06YysPhx39+WB/zWrtrxECMPYuyv\r\n6lbwfNwHQ6ab0FZOvLuQ3Y6lxJm+derxwSGJUwBwfWHmCIlqR4y+y1Tn4GPR\r\nCAyOSZ3zqFOKuvWGN93m/Rqoc/cg82UtYHoOGr1rccCe+bT/cL5Cdzf15a+x\r\ntbkvL8/dl2RlG39/YIkA63yUpEKldgDP1D5DefPPoVuYdX9Ga4B+x3PshWkH\r\nqQ17R17Xv6CSAcymWsAw/tosgmGOLzs9oXKIjshQeshV43bUy1btNN1RLCYo\r\nEmLMwchXDbve/xdBqYGBdCRf4yNb6xU8nQmpg0QN3DyuEJ8lDjOckbqtN/Mi\r\nlDxDtrLUssg8txP+dlB2WGQMUAZRKpYUCkh4mFx9xxObIpbpvysQ0uxcMfGB\r\n/EQ5xhQQaBNwdGQYo9nLSx4UoylxE2oM0Dqn4xUsPmD9yp/VvCT81iZT/IKm\r\nmRkTKVYoqstA5ZUaZ+7KO1n00Y8i0b54rCJS4GYFEMIbDHQcQh+jKbGOToh0\r\njTtqt9tgZk8hrSfOeeZyQ7QJLO/p51zWnql45WHoMWjc4tlIS/V07dGch5uG\r\nzRnhmSUB7B/CO0fVvnTas/eF6hIJnhaL0Zm6HLDMmvCCTZowaXjH/r3KIwNb\r\nVal6Po5Yz+Oxyd8mEepi+CsPi0W08YxEMOc=\r\n=ObGR\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-dts-bundle-20228303510_1664509892338_0.9757759945906435"},"_hasShrinkwrap":false},"0.0.0-babel-modern-20231227140935":{"name":"@vanilla-extract/private","version":"0.0.0-babel-modern-20231227140935","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-babel-modern-20231227140935","_integrity":"sha512-l6YU+p5cdYWbGGrfCeley34ILPp/xUws5raT7SoNTllrxycdpKmMe3L/b7KYTbmrOxlvcWImjA85VsKFEXtKzg==","_resolved":"/tmp/ad29f45c43e2df639861f2b86fdaa57a/vanilla-extract-private-0.0.0-babel-modern-20231227140935.tgz","_from":"file:vanilla-extract-private-0.0.0-babel-modern-20231227140935.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-l6YU+p5cdYWbGGrfCeley34ILPp/xUws5raT7SoNTllrxycdpKmMe3L/b7KYTbmrOxlvcWImjA85VsKFEXtKzg==","shasum":"89b5470071825a1ed8db1d3de1a77082563db149","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-babel-modern-20231227140935.tgz","fileCount":9,"unpackedSize":9524,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCiwfI4Loerka2s/lNNo+Ypd0d2kIbio4Fc8tUiHDCJ0AIhAOE0uONcSzjmN2ZNArCuaoihBWrFIMrjqRqkGGaKmQqp"}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-babel-modern-20231227140935_1703686198198_0.3255147326350776"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20231228080614":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20231228080614","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20231228080614","_integrity":"sha512-72xkQfEvHuUXXKzoNl84DIh8fHnMyQYpgVdIhKSt9J/rYhMJHnG15Lj4V8/0UXK39k7pY4XkaYexwXh/lzc6Mg==","_resolved":"/tmp/225b162b9a88ea7ba77257424483f36d/vanilla-extract-private-0.0.0-vite-plugin-new-20231228080614.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20231228080614.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-72xkQfEvHuUXXKzoNl84DIh8fHnMyQYpgVdIhKSt9J/rYhMJHnG15Lj4V8/0UXK39k7pY4XkaYexwXh/lzc6Mg==","shasum":"2b3bff46436fceccb6de02ec6a005e6ea3ca45bf","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20231228080614.tgz","fileCount":9,"unpackedSize":9527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBv7tHsG/PGTNXu+zcgQHhPhqkCx39LOOKXfVtHGmBm9AiADqJUdOTBn2tvjmuxEwK3bfHJelhNoAupv8niaHtuTmQ=="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20231228080614_1703750796181_0.40002718377553736"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20231229135000":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20231229135000","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20231229135000","_integrity":"sha512-eEEzrGbfbG8r+vgfdPBbOdALOfIvwqc8zxO37DmMMziFGqsM0wT5rcGPdAnDFce6GED2v+/J1Bo+38gv5gg35g==","_resolved":"/tmp/82e8965b32c46684acf1baba09d21e31/vanilla-extract-private-0.0.0-vite-plugin-new-20231229135000.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20231229135000.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-eEEzrGbfbG8r+vgfdPBbOdALOfIvwqc8zxO37DmMMziFGqsM0wT5rcGPdAnDFce6GED2v+/J1Bo+38gv5gg35g==","shasum":"f742fc9654d10e2ee2e565736913ff7041c5bce2","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20231229135000.tgz","fileCount":9,"unpackedSize":9527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7/vbK5J4sFYsOBJP8mMgPvgZGxB8kYTL8tLcgnxSJngIgAwjXv/2yMPtiKPsZWBRTlAM1BB3GIaj9A+kmm79o2f8="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20231229135000_1703857823068_0.3964916136407257"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20240102031009":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20240102031009","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20240102031009","_integrity":"sha512-6roTK6Hfc5kboHQLUklBJrPGz2GwpMQTiaIXoiG8u1yeor3jMKbcO6U7PgxoxbGeH4BNAnkCASv0BFbeCB1e0g==","_resolved":"/tmp/506bf4ef9988fd3836a8c167cafd114d/vanilla-extract-private-0.0.0-vite-plugin-new-20240102031009.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20240102031009.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-6roTK6Hfc5kboHQLUklBJrPGz2GwpMQTiaIXoiG8u1yeor3jMKbcO6U7PgxoxbGeH4BNAnkCASv0BFbeCB1e0g==","shasum":"3c5f165ea29fb3dbb2cf84cb67fd48a371cd2084","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20240102031009.tgz","fileCount":9,"unpackedSize":9527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUsR8r1S2zAkfkma3Vk/Iy/TTvUfQ42mkwpbQN4+z2EgIhAP2mwaI9WcwpJyILVuwo4Z2se9JU6RYITzOcQiKUYwnK"}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20240102031009_1704165031678_0.4700158439827571"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20240106013913":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20240106013913","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20240106013913","_integrity":"sha512-pa7DYSnTTF7O57REl10bynrV2Xz4OHt+xFa7G3c9k3+W1/Z/k+8bTu6kgAe8Ifbir6aLXkYAZ99GsqPOUEsq1A==","_resolved":"/tmp/de9a74526c68cf5cd4273f4b2432608a/vanilla-extract-private-0.0.0-vite-plugin-new-20240106013913.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20240106013913.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-pa7DYSnTTF7O57REl10bynrV2Xz4OHt+xFa7G3c9k3+W1/Z/k+8bTu6kgAe8Ifbir6aLXkYAZ99GsqPOUEsq1A==","shasum":"80b02c2d36a3c0114bbf2529639f7446ea5e35cf","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20240106013913.tgz","fileCount":9,"unpackedSize":9527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYelwSfn8irSmBSaVQ3raM93qLAM/IY0goV3mqOpnysQIhAL3kfn+O82CWNsfQcNTVpYqNYpq7sDE8lCV/s8MSN+W9"}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20240106013913_1704505175070_0.3770351749527703"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20240115025310":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20240115025310","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20240115025310","_integrity":"sha512-4SrQiq0jZgeX/ZovgniKzOr7kqphGOn8DCv5AtenbUy/hhwejrF8829cpm49cusB0A13MURxp6vVmBJWMQhVJQ==","_resolved":"/tmp/692a4a1e6c81815de5a9c1d2fa4eb2fe/vanilla-extract-private-0.0.0-vite-plugin-new-20240115025310.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20240115025310.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-4SrQiq0jZgeX/ZovgniKzOr7kqphGOn8DCv5AtenbUy/hhwejrF8829cpm49cusB0A13MURxp6vVmBJWMQhVJQ==","shasum":"989d2415d5467b47bf6a3ddbed1c6a9eae609631","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20240115025310.tgz","fileCount":9,"unpackedSize":9527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICg3eYJRqIYiUrqKKG6/GCf9Ry7OEfLeSLIrvV2YDaseAiBG6/MlDe+3MH9W/xOjAkIn2lWaU6QZQ1GK3LkUAB5U1A=="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20240115025310_1705287214904_0.3824309852260239"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20240115050437":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20240115050437","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20240115050437","_integrity":"sha512-RRLtGk95LIhtMVC0fCg3vOBZNMCln83T47rhf4TSko5kZemeok++bHPzwTDCJy6OHtBKa/DsvbDP8Kx6Qc8Qtw==","_resolved":"/tmp/d9af50af3657473d59b70ee03d5e752f/vanilla-extract-private-0.0.0-vite-plugin-new-20240115050437.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20240115050437.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-RRLtGk95LIhtMVC0fCg3vOBZNMCln83T47rhf4TSko5kZemeok++bHPzwTDCJy6OHtBKa/DsvbDP8Kx6Qc8Qtw==","shasum":"aefd65886af0f5e04c0f186e63c6b60e3931c83a","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20240115050437.tgz","fileCount":9,"unpackedSize":9851,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBVVQs3irf1OF/iN4wuklr5lIW8t/GG7GLuofpnx3eewIgMWtf9Ck/kVMkomOv3eJMXRY0OVg1cvXa3swhCoYnMJk="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20240115050437_1705295102817_0.07283701194513048"},"_hasShrinkwrap":false},"0.0.0-vite-plugin-new-20240116010153":{"name":"@vanilla-extract/private","version":"0.0.0-vite-plugin-new-20240116010153","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-vite-plugin-new-20240116010153","_integrity":"sha512-hxKu29xwVz3bh6uzflnCBbMYNGCJwvxZz45OP/dSWvu36ek12TAtwdpP0FG+TvzVoiQfgBsOrbSfuu9mUa/frg==","_resolved":"/tmp/87c63cf604c464be4ef45f3fc8f02e8a/vanilla-extract-private-0.0.0-vite-plugin-new-20240116010153.tgz","_from":"file:vanilla-extract-private-0.0.0-vite-plugin-new-20240116010153.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-hxKu29xwVz3bh6uzflnCBbMYNGCJwvxZz45OP/dSWvu36ek12TAtwdpP0FG+TvzVoiQfgBsOrbSfuu9mUa/frg==","shasum":"77cfda127d524940541a916e0c4c8c13a75d6a13","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-vite-plugin-new-20240116010153.tgz","fileCount":9,"unpackedSize":9851,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCAwOFXKj1lFwCMJFDMspxabUun9c60RoE5dR95J9jfhAIhAMcwyx+CvdiA4R0a/pl++v5vr8/JtHJnDtXFOx2BEIcY"}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-vite-plugin-new-20240116010153_1705366935282_0.3538769772531545"},"_hasShrinkwrap":false},"0.0.0-namespace-theme-tokens-20240321223951":{"name":"@vanilla-extract/private","version":"0.0.0-namespace-theme-tokens-20240321223951","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-namespace-theme-tokens-20240321223951","_integrity":"sha512-nvxxPpOxnnEyWAqc8S6dMiLCIhDeugc0TGT0OLniXnVVyx+TkurU5ymjoRIL/XTBeESAlMEidLxFIDuqrZFR/g==","_resolved":"/tmp/7f2f059dc549f77fe12b2f61317fc51f/vanilla-extract-private-0.0.0-namespace-theme-tokens-20240321223951.tgz","_from":"file:vanilla-extract-private-0.0.0-namespace-theme-tokens-20240321223951.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-nvxxPpOxnnEyWAqc8S6dMiLCIhDeugc0TGT0OLniXnVVyx+TkurU5ymjoRIL/XTBeESAlMEidLxFIDuqrZFR/g==","shasum":"ea96ff633c7f543d517acc49d4da764720532a6b","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-namespace-theme-tokens-20240321223951.tgz","fileCount":9,"unpackedSize":9813,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH8f+0a7EQRqjkBYmUfTaOSxvmGrdxdQ+N0OTimabQ35AiEAtXiNLanDPA2ZMo+VcZ7ChGBxKaW5Ah+bnwTeufziy0s="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-namespace-theme-tokens-20240321223951_1711060814343_0.2779825375279661"},"_hasShrinkwrap":false},"0.0.0-namespace-theme-tokens-20240321225912":{"name":"@vanilla-extract/private","version":"0.0.0-namespace-theme-tokens-20240321225912","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-namespace-theme-tokens-20240321225912","_integrity":"sha512-P7SPUqmqDnKtGF3uBmcIZKUQbP4YJfoOcfsYJXDQ+VSkeikQTq4OTzr9L9nV1kaxq+rAdRw9pqYJPKS4jEt0Sg==","_resolved":"/tmp/110e61541d6b8782b7cef6a4ef47dea9/vanilla-extract-private-0.0.0-namespace-theme-tokens-20240321225912.tgz","_from":"file:vanilla-extract-private-0.0.0-namespace-theme-tokens-20240321225912.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-P7SPUqmqDnKtGF3uBmcIZKUQbP4YJfoOcfsYJXDQ+VSkeikQTq4OTzr9L9nV1kaxq+rAdRw9pqYJPKS4jEt0Sg==","shasum":"9c532926463d5f084b9f9d277d3bef86c4acb53b","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-namespace-theme-tokens-20240321225912.tgz","fileCount":9,"unpackedSize":9813,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDp9JuJmwn39yAl085Y9wi7tuHNiYbIdITM4yH+AnQpLgIhAJKspC8+Vhfk7SnQRE3lixlI9J3x+npxY3Gb7vew6gac"}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-namespace-theme-tokens-20240321225912_1711061969793_0.9271685546399973"},"_hasShrinkwrap":false},"1.0.4":{"name":"@vanilla-extract/private","version":"1.0.4","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","types":"./dist/vanilla-extract-private.cjs.d.ts","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.4","_integrity":"sha512-8FGD6AejeC/nXcblgNCM5rnZb9KXa4WNkR03HCWtdJBpANjTgjHEglNLFnhuvdQ78tC6afaxBPI+g7F2NX3tgg==","_resolved":"/tmp/ac735f6ed243bd04ea4d7c2bde4d019b/vanilla-extract-private-1.0.4.tgz","_from":"file:vanilla-extract-private-1.0.4.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-8FGD6AejeC/nXcblgNCM5rnZb9KXa4WNkR03HCWtdJBpANjTgjHEglNLFnhuvdQ78tC6afaxBPI+g7F2NX3tgg==","shasum":"35946b917d6b9774a2b9bc725c63c9341049c79b","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.4.tgz","fileCount":9,"unpackedSize":9775,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCuuNcpqOWNGWIS16j3sLmjO8WXsOiiCHx1J3sWbwuoVAIgCJ58HbaJPb26Mqizgw+yGFeUBJIXkJ+01XmC0jXiwiw="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.4_1711695952127_0.8978841538471543"},"_hasShrinkwrap":false},"0.0.0-package-json-types-field-20240521234503":{"name":"@vanilla-extract/private","version":"0.0.0-package-json-types-field-20240521234503","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","types":"dist/vanilla-extract-private.cjs.d.ts","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@0.0.0-package-json-types-field-20240521234503","_integrity":"sha512-a+NmouU7koz8j3DHWhg2rNCDkSiSC1J2ygGvSaU8tAdh2senBPdugsG2fMBX/3yC/k6N1IYqW9gkUfk4d2JA/Q==","_resolved":"/tmp/379a491ee64e9effa6d25ba89a58eb6d/vanilla-extract-private-0.0.0-package-json-types-field-20240521234503.tgz","_from":"file:vanilla-extract-private-0.0.0-package-json-types-field-20240521234503.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-a+NmouU7koz8j3DHWhg2rNCDkSiSC1J2ygGvSaU8tAdh2senBPdugsG2fMBX/3yC/k6N1IYqW9gkUfk4d2JA/Q==","shasum":"7e1dc106248f4442dc3f98cbfbf9e42d20c9fea5","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-0.0.0-package-json-types-field-20240521234503.tgz","fileCount":9,"unpackedSize":9867,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID6vqXbw4l7ROY2Ji88BFd9gXkWSP0kLj/QVL7tfuovYAiEAmXeQWBUcliRkMscDTOzLDdPOQbzvJ2eERtbZ0mcGl58="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_0.0.0-package-json-types-field-20240521234503_1716335130140_0.9712027396854057"},"_hasShrinkwrap":false},"1.0.5":{"name":"@vanilla-extract/private","version":"1.0.5","description":"Zero-runtime Stylesheets-in-TypeScript","sideEffects":false,"main":"dist/vanilla-extract-private.cjs.js","module":"dist/vanilla-extract-private.esm.js","types":"dist/vanilla-extract-private.cjs.d.ts","preconstruct":{"entrypoints":["index.ts"]},"repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"license":"MIT","bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","_id":"@vanilla-extract/private@1.0.5","_integrity":"sha512-6YXeOEKYTA3UV+RC8DeAjFk+/okoNz/h88R+McnzA2zpaVqTR/Ep+vszkWYlGBcMNO7vEkqbq5nT/JMMvhi+tw==","_resolved":"/tmp/e6149b31f230bab838f624b54cc36abc/vanilla-extract-private-1.0.5.tgz","_from":"file:vanilla-extract-private-1.0.5.tgz","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-6YXeOEKYTA3UV+RC8DeAjFk+/okoNz/h88R+McnzA2zpaVqTR/Ep+vszkWYlGBcMNO7vEkqbq5nT/JMMvhi+tw==","shasum":"8c08ac4851f4cc89a3dcdb858d8938e69b1481c4","tarball":"https://registry.npmjs.org/@vanilla-extract/private/-/private-1.0.5.tgz","fileCount":9,"unpackedSize":9827,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGAKHyxCvWlgUkoKE3cIU4GiEiKDEyhoqxh/aUC6+kJrAiEA3GF3M+UpC6aGpKqUNG1hr+Dx6Y8siSaLGrM6pk7JgIY="}]},"_npmUser":{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},"directories":{},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/private_1.0.5_1716336505406_0.6081186707377766"},"_hasShrinkwrap":false}},"time":{"created":"2021-04-12T07:36:18.847Z","0.1.0":"2021-04-12T07:36:19.229Z","modified":"2024-05-22T00:08:25.806Z","0.1.1":"2021-04-26T00:12:24.008Z","0.1.2":"2021-05-05T04:59:47.061Z","1.0.0":"2021-05-28T05:51:37.817Z","1.0.1":"2021-07-16T05:46:28.938Z","1.0.2":"2021-11-24T22:32:43.974Z","1.0.3":"2021-12-02T00:33:07.243Z","0.0.0-get-crackling-202281912152":"2022-09-19T01:24:38.170Z","0.0.0-get-crackling-202281935912":"2022-09-19T04:01:09.075Z","0.0.0-get-crackling-202281955846":"2022-09-19T06:00:55.331Z","0.0.0-dts-bundle-202282944525":"2022-09-29T04:46:46.047Z","0.0.0-dts-bundle-202282983532":"2022-09-29T08:35:59.397Z","0.0.0-dts-bundle-20228303510":"2022-09-30T03:51:32.522Z","0.0.0-babel-modern-20231227140935":"2023-12-27T14:09:58.325Z","0.0.0-vite-plugin-new-20231228080614":"2023-12-28T08:06:36.358Z","0.0.0-vite-plugin-new-20231229135000":"2023-12-29T13:50:23.248Z","0.0.0-vite-plugin-new-20240102031009":"2024-01-02T03:10:31.871Z","0.0.0-vite-plugin-new-20240106013913":"2024-01-06T01:39:35.240Z","0.0.0-vite-plugin-new-20240115025310":"2024-01-15T02:53:35.058Z","0.0.0-vite-plugin-new-20240115050437":"2024-01-15T05:05:02.989Z","0.0.0-vite-plugin-new-20240116010153":"2024-01-16T01:02:15.539Z","0.0.0-namespace-theme-tokens-20240321223951":"2024-03-21T22:40:14.571Z","0.0.0-namespace-theme-tokens-20240321225912":"2024-03-21T22:59:29.951Z","1.0.4":"2024-03-29T07:05:52.265Z","0.0.0-package-json-types-field-20240521234503":"2024-05-21T23:45:30.308Z","1.0.5":"2024-05-22T00:08:25.559Z"},"maintainers":[{"name":"vanilla-extract-css","email":"vanillaextractcss@gmail.com"},{"name":"mattsjones","email":"mattjones701@gmail.com"},{"name":"mjt01","email":"michael.taranto@gmail.com"},{"name":"jahredhope","email":"jahredhope@gmail.com"}],"description":"Zero-runtime Stylesheets-in-TypeScript","homepage":"https://github.com/vanilla-extract-css/vanilla-extract#readme","repository":{"type":"git","url":"git+https://github.com/vanilla-extract-css/vanilla-extract.git","directory":"packages/private"},"author":{"name":"SEEK"},"bugs":{"url":"https://github.com/vanilla-extract-css/vanilla-extract/issues"},"license":"MIT","readme":"# 🧁 vanilla-extract\n\n**Zero-runtime Stylesheets-in-TypeScript.**\n\nWrite your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.\n\nBasically, it’s [“CSS Modules](https://github.com/css-modules/css-modules)-in-TypeScript” but with scoped CSS Variables + heaps more.\n\n🔥 &nbsp; All styles generated at build time — just like [Sass](https://sass-lang.com), [Less](http://lesscss.org), etc.\n\n✨ &nbsp; Minimal abstraction over standard CSS.\n\n🦄 &nbsp; Works with any front-end framework — or even without one.\n\n🌳 &nbsp; Locally scoped class names — just like [CSS Modules.](https://github.com/css-modules/css-modules)\n\n🚀 &nbsp; Locally scoped [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties), `@keyframes` and `@font-face` rules.\n\n🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!\n\n🛠 &nbsp; Utils for generating variable-based `calc` expressions.\n\n💪 &nbsp; Type-safe styles via [CSSType.](https://github.com/frenic/csstype)\n\n🏃‍♂️ &nbsp; Optional runtime version for development and testing.\n\n🙈 &nbsp; Optional API for dynamic runtime theming.\n\n---\n\n🌐 [Check out the documentation site for setup guides, examples and API docs.](https://vanilla-extract.style)\n\n\n\n---\n\n🖥 &nbsp; [Try it out for yourself in CodeSandbox.](https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts)\n\n---\n\n**Write your styles in `.css.ts` files.**\n\n```ts\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n> 💡 Once you've [configured your build tooling,](https://vanilla-extract.style/documentation/getting-started/) these `.css.ts` files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.\n\n**Then consume them in your markup.**\n\n```ts\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n---\n\nWant to work at a higher level while maximising style re-use? Check out  🍨 [Sprinkles](https://vanilla-extract.style/documentation/packages/sprinkles), our official zero-runtime atomic CSS framework, built on top of vanilla-extract.\n\n---\n\n## Thanks\n\n- [Nathan Nam Tran](https://twitter.com/naistran) for creating [css-in-js-loader](https://github.com/naistran/css-in-js-loader), which served as the initial starting point for [treat](https://seek-oss.github.io/treat), the precursor to this library.\n- [Stitches](https://stitches.dev/) for getting us excited about CSS-Variables-in-JS.\n- [SEEK](https://www.seek.com.au) for giving us the space to do interesting work.\n\n## License\n\nMIT.\n","readmeFilename":"README.md"}